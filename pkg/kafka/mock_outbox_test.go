// Code generated by MockGen. DO NOT EDIT.
// Source: outbox.go
//
// Generated by this command:
//
//	mockgen -destination=mock_outbox_test.go -package=kafka_test -source=outbox.go
//

// Package kafka_test is a generated GoMock package.
package kafka_test

import (
	context "context"
	reflect "reflect"

	kafka "github.com/natsoman/youtube-chat-reader/pkg/kafka"
	gomock "go.uber.org/mock/gomock"
)

// MockOutboxRepository is a mock of OutboxRepository interface.
type MockOutboxRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOutboxRepositoryMockRecorder
	isgomock struct{}
}

// MockOutboxRepositoryMockRecorder is the mock recorder for MockOutboxRepository.
type MockOutboxRepositoryMockRecorder struct {
	mock *MockOutboxRepository
}

// NewMockOutboxRepository creates a new mock instance.
func NewMockOutboxRepository(ctrl *gomock.Controller) *MockOutboxRepository {
	mock := &MockOutboxRepository{ctrl: ctrl}
	mock.recorder = &MockOutboxRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutboxRepository) EXPECT() *MockOutboxRepositoryMockRecorder {
	return m.recorder
}

// MarkAsPublished mocks base method.
func (m *MockOutboxRepository) MarkAsPublished(ctx context.Context, events []kafka.OutboxEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsPublished", ctx, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsPublished indicates an expected call of MarkAsPublished.
func (mr *MockOutboxRepositoryMockRecorder) MarkAsPublished(ctx, events any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsPublished", reflect.TypeOf((*MockOutboxRepository)(nil).MarkAsPublished), ctx, events)
}

// Pending mocks base method.
func (m *MockOutboxRepository) Pending(ctx context.Context) ([]kafka.OutboxEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pending", ctx)
	ret0, _ := ret[0].([]kafka.OutboxEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pending indicates an expected call of Pending.
func (mr *MockOutboxRepositoryMockRecorder) Pending(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pending", reflect.TypeOf((*MockOutboxRepository)(nil).Pending), ctx)
}
