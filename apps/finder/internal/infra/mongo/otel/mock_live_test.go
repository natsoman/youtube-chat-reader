// Code generated by MockGen. DO NOT EDIT.
// Source: live.go
//
// Generated by this command:
//
//	mockgen -destination=mock_live_test.go -package=otel_test -source=live.go
//

// Package otel_test is a generated GoMock package.
package otel_test

import (
	context "context"
	reflect "reflect"

	domain "github.com/natsoman/youtube-chat-reader/apps/finder/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockLiveStreamRepository is a mock of LiveStreamRepository interface.
type MockLiveStreamRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLiveStreamRepositoryMockRecorder
	isgomock struct{}
}

// MockLiveStreamRepositoryMockRecorder is the mock recorder for MockLiveStreamRepository.
type MockLiveStreamRepositoryMockRecorder struct {
	mock *MockLiveStreamRepository
}

// NewMockLiveStreamRepository creates a new mock instance.
func NewMockLiveStreamRepository(ctrl *gomock.Controller) *MockLiveStreamRepository {
	mock := &MockLiveStreamRepository{ctrl: ctrl}
	mock.recorder = &MockLiveStreamRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLiveStreamRepository) EXPECT() *MockLiveStreamRepositoryMockRecorder {
	return m.recorder
}

// Existing mocks base method.
func (m *MockLiveStreamRepository) Existing(ctx context.Context, liveStreamIDs []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Existing", ctx, liveStreamIDs)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Existing indicates an expected call of Existing.
func (mr *MockLiveStreamRepositoryMockRecorder) Existing(ctx, liveStreamIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Existing", reflect.TypeOf((*MockLiveStreamRepository)(nil).Existing), ctx, liveStreamIDs)
}

// Insert mocks base method.
func (m *MockLiveStreamRepository) Insert(ctx context.Context, liveStreams []domain.LiveStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, liveStreams)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockLiveStreamRepositoryMockRecorder) Insert(ctx, liveStreams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockLiveStreamRepository)(nil).Insert), ctx, liveStreams)
}
