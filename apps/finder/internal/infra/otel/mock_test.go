// Code generated by MockGen. DO NOT EDIT.
// Source: find.go
//
// Generated by this command:
//
//	mockgen -destination=mock_test.go -package=otel_test -source=find.go
//

// Package otel_test is a generated GoMock package.
package otel_test

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	context "golang.org/x/net/context"
)

// MockLiveStreamFinder is a mock of LiveStreamFinder interface.
type MockLiveStreamFinder struct {
	ctrl     *gomock.Controller
	recorder *MockLiveStreamFinderMockRecorder
	isgomock struct{}
}

// MockLiveStreamFinderMockRecorder is the mock recorder for MockLiveStreamFinder.
type MockLiveStreamFinderMockRecorder struct {
	mock *MockLiveStreamFinder
}

// NewMockLiveStreamFinder creates a new mock instance.
func NewMockLiveStreamFinder(ctrl *gomock.Controller) *MockLiveStreamFinder {
	mock := &MockLiveStreamFinder{ctrl: ctrl}
	mock.recorder = &MockLiveStreamFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLiveStreamFinder) EXPECT() *MockLiveStreamFinderMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockLiveStreamFinder) Find(ctx context.Context, channelIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, channelIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockLiveStreamFinderMockRecorder) Find(ctx, channelIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockLiveStreamFinder)(nil).Find), ctx, channelIDs)
}
