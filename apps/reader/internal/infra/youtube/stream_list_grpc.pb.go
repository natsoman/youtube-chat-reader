// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: apps/reader/internal/infra/youtube/stream_list.proto

package youtube

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	V3DataLiveChatMessageService_StreamList_FullMethodName = "/youtube.api.v3.V3DataLiveChatMessageService/StreamList"
)

// V3DataLiveChatMessageServiceClient is the client API for V3DataLiveChatMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type V3DataLiveChatMessageServiceClient interface {
	// Allows a user to load live chat through a server-streamed RPC.
	StreamList(ctx context.Context, in *LiveChatMessageListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LiveChatMessageListResponse], error)
}

type v3DataLiveChatMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewV3DataLiveChatMessageServiceClient(cc grpc.ClientConnInterface) V3DataLiveChatMessageServiceClient {
	return &v3DataLiveChatMessageServiceClient{cc}
}

func (c *v3DataLiveChatMessageServiceClient) StreamList(ctx context.Context, in *LiveChatMessageListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LiveChatMessageListResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &V3DataLiveChatMessageService_ServiceDesc.Streams[0], V3DataLiveChatMessageService_StreamList_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LiveChatMessageListRequest, LiveChatMessageListResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type V3DataLiveChatMessageService_StreamListClient = grpc.ServerStreamingClient[LiveChatMessageListResponse]

// V3DataLiveChatMessageServiceServer is the server API for V3DataLiveChatMessageService service.
// All implementations must embed UnimplementedV3DataLiveChatMessageServiceServer
// for forward compatibility.
type V3DataLiveChatMessageServiceServer interface {
	// Allows a user to load live chat through a server-streamed RPC.
	StreamList(*LiveChatMessageListRequest, grpc.ServerStreamingServer[LiveChatMessageListResponse]) error
	mustEmbedUnimplementedV3DataLiveChatMessageServiceServer()
}

// UnimplementedV3DataLiveChatMessageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedV3DataLiveChatMessageServiceServer struct{}

func (UnimplementedV3DataLiveChatMessageServiceServer) StreamList(*LiveChatMessageListRequest, grpc.ServerStreamingServer[LiveChatMessageListResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamList not implemented")
}
func (UnimplementedV3DataLiveChatMessageServiceServer) mustEmbedUnimplementedV3DataLiveChatMessageServiceServer() {
}
func (UnimplementedV3DataLiveChatMessageServiceServer) testEmbeddedByValue() {}

// UnsafeV3DataLiveChatMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V3DataLiveChatMessageServiceServer will
// result in compilation errors.
type UnsafeV3DataLiveChatMessageServiceServer interface {
	mustEmbedUnimplementedV3DataLiveChatMessageServiceServer()
}

func RegisterV3DataLiveChatMessageServiceServer(s grpc.ServiceRegistrar, srv V3DataLiveChatMessageServiceServer) {
	// If the following call pancis, it indicates UnimplementedV3DataLiveChatMessageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&V3DataLiveChatMessageService_ServiceDesc, srv)
}

func _V3DataLiveChatMessageService_StreamList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LiveChatMessageListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(V3DataLiveChatMessageServiceServer).StreamList(m, &grpc.GenericServerStream[LiveChatMessageListRequest, LiveChatMessageListResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type V3DataLiveChatMessageService_StreamListServer = grpc.ServerStreamingServer[LiveChatMessageListResponse]

// V3DataLiveChatMessageService_ServiceDesc is the grpc.ServiceDesc for V3DataLiveChatMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V3DataLiveChatMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "youtube.api.v3.V3DataLiveChatMessageService",
	HandlerType: (*V3DataLiveChatMessageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamList",
			Handler:       _V3DataLiveChatMessageService_StreamList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "apps/reader/internal/infra/youtube/stream_list.proto",
}
