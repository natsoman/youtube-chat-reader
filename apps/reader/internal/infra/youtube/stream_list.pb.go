// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.0
// source: apps/reader/internal/infra/youtube/stream_list.proto

package youtube

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LiveChatMessageSnippet_TypeWrapper_Type int32

const (
	LiveChatMessageSnippet_TypeWrapper_INVALID_TYPE                    LiveChatMessageSnippet_TypeWrapper_Type = 0
	LiveChatMessageSnippet_TypeWrapper_TEXT_MESSAGE_EVENT              LiveChatMessageSnippet_TypeWrapper_Type = 1
	LiveChatMessageSnippet_TypeWrapper_TOMBSTONE                       LiveChatMessageSnippet_TypeWrapper_Type = 2
	LiveChatMessageSnippet_TypeWrapper_FAN_FUNDING_EVENT               LiveChatMessageSnippet_TypeWrapper_Type = 3
	LiveChatMessageSnippet_TypeWrapper_CHAT_ENDED_EVENT                LiveChatMessageSnippet_TypeWrapper_Type = 4
	LiveChatMessageSnippet_TypeWrapper_SPONSOR_ONLY_MODE_STARTED_EVENT LiveChatMessageSnippet_TypeWrapper_Type = 5
	LiveChatMessageSnippet_TypeWrapper_SPONSOR_ONLY_MODE_ENDED_EVENT   LiveChatMessageSnippet_TypeWrapper_Type = 6
	LiveChatMessageSnippet_TypeWrapper_NEW_SPONSOR_EVENT               LiveChatMessageSnippet_TypeWrapper_Type = 7
	LiveChatMessageSnippet_TypeWrapper_MEMBER_MILESTONE_CHAT_EVENT     LiveChatMessageSnippet_TypeWrapper_Type = 17
	LiveChatMessageSnippet_TypeWrapper_MEMBERSHIP_GIFTING_EVENT        LiveChatMessageSnippet_TypeWrapper_Type = 18
	LiveChatMessageSnippet_TypeWrapper_GIFT_MEMBERSHIP_RECEIVED_EVENT  LiveChatMessageSnippet_TypeWrapper_Type = 19
	LiveChatMessageSnippet_TypeWrapper_MESSAGE_DELETED_EVENT           LiveChatMessageSnippet_TypeWrapper_Type = 8
	LiveChatMessageSnippet_TypeWrapper_MESSAGE_RETRACTED_EVENT         LiveChatMessageSnippet_TypeWrapper_Type = 9
	LiveChatMessageSnippet_TypeWrapper_USER_BANNED_EVENT               LiveChatMessageSnippet_TypeWrapper_Type = 10
	LiveChatMessageSnippet_TypeWrapper_SUPER_CHAT_EVENT                LiveChatMessageSnippet_TypeWrapper_Type = 15
	LiveChatMessageSnippet_TypeWrapper_SUPER_STICKER_EVENT             LiveChatMessageSnippet_TypeWrapper_Type = 16
	LiveChatMessageSnippet_TypeWrapper_POLL_EVENT                      LiveChatMessageSnippet_TypeWrapper_Type = 20
)

// Enum value maps for LiveChatMessageSnippet_TypeWrapper_Type.
var (
	LiveChatMessageSnippet_TypeWrapper_Type_name = map[int32]string{
		0:  "INVALID_TYPE",
		1:  "TEXT_MESSAGE_EVENT",
		2:  "TOMBSTONE",
		3:  "FAN_FUNDING_EVENT",
		4:  "CHAT_ENDED_EVENT",
		5:  "SPONSOR_ONLY_MODE_STARTED_EVENT",
		6:  "SPONSOR_ONLY_MODE_ENDED_EVENT",
		7:  "NEW_SPONSOR_EVENT",
		17: "MEMBER_MILESTONE_CHAT_EVENT",
		18: "MEMBERSHIP_GIFTING_EVENT",
		19: "GIFT_MEMBERSHIP_RECEIVED_EVENT",
		8:  "MESSAGE_DELETED_EVENT",
		9:  "MESSAGE_RETRACTED_EVENT",
		10: "USER_BANNED_EVENT",
		15: "SUPER_CHAT_EVENT",
		16: "SUPER_STICKER_EVENT",
		20: "POLL_EVENT",
	}
	LiveChatMessageSnippet_TypeWrapper_Type_value = map[string]int32{
		"INVALID_TYPE":                    0,
		"TEXT_MESSAGE_EVENT":              1,
		"TOMBSTONE":                       2,
		"FAN_FUNDING_EVENT":               3,
		"CHAT_ENDED_EVENT":                4,
		"SPONSOR_ONLY_MODE_STARTED_EVENT": 5,
		"SPONSOR_ONLY_MODE_ENDED_EVENT":   6,
		"NEW_SPONSOR_EVENT":               7,
		"MEMBER_MILESTONE_CHAT_EVENT":     17,
		"MEMBERSHIP_GIFTING_EVENT":        18,
		"GIFT_MEMBERSHIP_RECEIVED_EVENT":  19,
		"MESSAGE_DELETED_EVENT":           8,
		"MESSAGE_RETRACTED_EVENT":         9,
		"USER_BANNED_EVENT":               10,
		"SUPER_CHAT_EVENT":                15,
		"SUPER_STICKER_EVENT":             16,
		"POLL_EVENT":                      20,
	}
)

func (x LiveChatMessageSnippet_TypeWrapper_Type) Enum() *LiveChatMessageSnippet_TypeWrapper_Type {
	p := new(LiveChatMessageSnippet_TypeWrapper_Type)
	*p = x
	return p
}

func (x LiveChatMessageSnippet_TypeWrapper_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LiveChatMessageSnippet_TypeWrapper_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_enumTypes[0].Descriptor()
}

func (LiveChatMessageSnippet_TypeWrapper_Type) Type() protoreflect.EnumType {
	return &file_apps_reader_internal_infra_youtube_stream_list_proto_enumTypes[0]
}

func (x LiveChatMessageSnippet_TypeWrapper_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LiveChatMessageSnippet_TypeWrapper_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LiveChatMessageSnippet_TypeWrapper_Type(num)
	return nil
}

// Deprecated: Use LiveChatMessageSnippet_TypeWrapper_Type.Descriptor instead.
func (LiveChatMessageSnippet_TypeWrapper_Type) EnumDescriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{4, 0, 0}
}

type LiveChatUserBannedMessageDetails_BanTypeWrapper_BanType int32

const (
	LiveChatUserBannedMessageDetails_BanTypeWrapper_PERMANENT LiveChatUserBannedMessageDetails_BanTypeWrapper_BanType = 1
	LiveChatUserBannedMessageDetails_BanTypeWrapper_TEMPORARY LiveChatUserBannedMessageDetails_BanTypeWrapper_BanType = 2
)

// Enum value maps for LiveChatUserBannedMessageDetails_BanTypeWrapper_BanType.
var (
	LiveChatUserBannedMessageDetails_BanTypeWrapper_BanType_name = map[int32]string{
		1: "PERMANENT",
		2: "TEMPORARY",
	}
	LiveChatUserBannedMessageDetails_BanTypeWrapper_BanType_value = map[string]int32{
		"PERMANENT": 1,
		"TEMPORARY": 2,
	}
)

func (x LiveChatUserBannedMessageDetails_BanTypeWrapper_BanType) Enum() *LiveChatUserBannedMessageDetails_BanTypeWrapper_BanType {
	p := new(LiveChatUserBannedMessageDetails_BanTypeWrapper_BanType)
	*p = x
	return p
}

func (x LiveChatUserBannedMessageDetails_BanTypeWrapper_BanType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LiveChatUserBannedMessageDetails_BanTypeWrapper_BanType) Descriptor() protoreflect.EnumDescriptor {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_enumTypes[1].Descriptor()
}

func (LiveChatUserBannedMessageDetails_BanTypeWrapper_BanType) Type() protoreflect.EnumType {
	return &file_apps_reader_internal_infra_youtube_stream_list_proto_enumTypes[1]
}

func (x LiveChatUserBannedMessageDetails_BanTypeWrapper_BanType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LiveChatUserBannedMessageDetails_BanTypeWrapper_BanType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LiveChatUserBannedMessageDetails_BanTypeWrapper_BanType(num)
	return nil
}

// Deprecated: Use LiveChatUserBannedMessageDetails_BanTypeWrapper_BanType.Descriptor instead.
func (LiveChatUserBannedMessageDetails_BanTypeWrapper_BanType) EnumDescriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{8, 0, 0}
}

type LiveChatPollDetails_PollStatusWrapper_PollStatus int32

const (
	LiveChatPollDetails_PollStatusWrapper_UNKNOWN LiveChatPollDetails_PollStatusWrapper_PollStatus = 0
	LiveChatPollDetails_PollStatusWrapper_ACTIVE  LiveChatPollDetails_PollStatusWrapper_PollStatus = 1
	LiveChatPollDetails_PollStatusWrapper_CLOSED  LiveChatPollDetails_PollStatusWrapper_PollStatus = 2
)

// Enum value maps for LiveChatPollDetails_PollStatusWrapper_PollStatus.
var (
	LiveChatPollDetails_PollStatusWrapper_PollStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "ACTIVE",
		2: "CLOSED",
	}
	LiveChatPollDetails_PollStatusWrapper_PollStatus_value = map[string]int32{
		"UNKNOWN": 0,
		"ACTIVE":  1,
		"CLOSED":  2,
	}
)

func (x LiveChatPollDetails_PollStatusWrapper_PollStatus) Enum() *LiveChatPollDetails_PollStatusWrapper_PollStatus {
	p := new(LiveChatPollDetails_PollStatusWrapper_PollStatus)
	*p = x
	return p
}

func (x LiveChatPollDetails_PollStatusWrapper_PollStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LiveChatPollDetails_PollStatusWrapper_PollStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_enumTypes[2].Descriptor()
}

func (LiveChatPollDetails_PollStatusWrapper_PollStatus) Type() protoreflect.EnumType {
	return &file_apps_reader_internal_infra_youtube_stream_list_proto_enumTypes[2]
}

func (x LiveChatPollDetails_PollStatusWrapper_PollStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LiveChatPollDetails_PollStatusWrapper_PollStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LiveChatPollDetails_PollStatusWrapper_PollStatus(num)
	return nil
}

// Deprecated: Use LiveChatPollDetails_PollStatusWrapper_PollStatus.Descriptor instead.
func (LiveChatPollDetails_PollStatusWrapper_PollStatus) EnumDescriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{16, 1, 0}
}

type LiveChatMessageListRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the live chat for which comments should be returned.
	LiveChatId *string `protobuf:"bytes,1,opt,name=live_chat_id,json=liveChatId" json:"live_chat_id,omitempty"`
	// Specifies the localization language in which the system messages
	// should be returned.
	Hl *string `protobuf:"bytes,2,opt,name=hl" json:"hl,omitempty"`
	// Specifies the size of the profile image that should be
	// returned for each user.
	ProfileImageSize *uint32 `protobuf:"varint,3,opt,name=profile_image_size,json=profileImageSize" json:"profile_image_size,omitempty"`
	// The <code><strong>maxResults</strong></code> parameter specifies the
	// maximum number of items that should be returned in the result set.
	// Not used in the streaming RPC.
	MaxResults *uint32 `protobuf:"varint,98,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
	// The <code><strong>pageToken</strong></code> parameter identifies a specific
	// page in the result set that should be returned. In an API response, the
	// <code>nextPageToken</code> property identify other pages that could be
	// retrieved.
	PageToken *string `protobuf:"bytes,99,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	// The <code><strong>part</strong></code> parameter specifies the
	// <code>liveChatComment</code> resource parts that the API response will
	// include. Supported values are <code>id</code>, <code>snippet</code>, and
	// <code>authorDetails</code>.
	Part          []string `protobuf:"bytes,100,rep,name=part" json:"part,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveChatMessageListRequest) Reset() {
	*x = LiveChatMessageListRequest{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveChatMessageListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChatMessageListRequest) ProtoMessage() {}

func (x *LiveChatMessageListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChatMessageListRequest.ProtoReflect.Descriptor instead.
func (*LiveChatMessageListRequest) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{0}
}

func (x *LiveChatMessageListRequest) GetLiveChatId() string {
	if x != nil && x.LiveChatId != nil {
		return *x.LiveChatId
	}
	return ""
}

func (x *LiveChatMessageListRequest) GetHl() string {
	if x != nil && x.Hl != nil {
		return *x.Hl
	}
	return ""
}

func (x *LiveChatMessageListRequest) GetProfileImageSize() uint32 {
	if x != nil && x.ProfileImageSize != nil {
		return *x.ProfileImageSize
	}
	return 0
}

func (x *LiveChatMessageListRequest) GetMaxResults() uint32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

func (x *LiveChatMessageListRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *LiveChatMessageListRequest) GetPart() []string {
	if x != nil {
		return x.Part
	}
	return nil
}

type LiveChatMessageListResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifies what kind of resource this is. Value: the fixed string
	// <code>"youtube#liveChatMessageListResponse"</code>.
	Kind *string `protobuf:"bytes,200,opt,name=kind" json:"kind,omitempty"`
	// Etag of this resource.
	Etag *string `protobuf:"bytes,201,opt,name=etag" json:"etag,omitempty"`
	// The date and time when the underlying stream went offline. The value is
	// specified in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
	// format.
	OfflineAt *string `protobuf:"bytes,2,opt,name=offline_at,json=offlineAt" json:"offline_at,omitempty"`
	// General pagination information.
	PageInfo      *PageInfo          `protobuf:"bytes,1004,opt,name=page_info,json=pageInfo" json:"page_info,omitempty"`
	NextPageToken *string            `protobuf:"bytes,100602,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
	Items         []*LiveChatMessage `protobuf:"bytes,1007,rep,name=items" json:"items,omitempty"`
	// Set when there is an active poll.
	ActivePollItem *LiveChatMessage `protobuf:"bytes,1008,opt,name=active_poll_item,json=activePollItem" json:"active_poll_item,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LiveChatMessageListResponse) Reset() {
	*x = LiveChatMessageListResponse{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveChatMessageListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChatMessageListResponse) ProtoMessage() {}

func (x *LiveChatMessageListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChatMessageListResponse.ProtoReflect.Descriptor instead.
func (*LiveChatMessageListResponse) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{1}
}

func (x *LiveChatMessageListResponse) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *LiveChatMessageListResponse) GetEtag() string {
	if x != nil && x.Etag != nil {
		return *x.Etag
	}
	return ""
}

func (x *LiveChatMessageListResponse) GetOfflineAt() string {
	if x != nil && x.OfflineAt != nil {
		return *x.OfflineAt
	}
	return ""
}

func (x *LiveChatMessageListResponse) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

func (x *LiveChatMessageListResponse) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

func (x *LiveChatMessageListResponse) GetItems() []*LiveChatMessage {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *LiveChatMessageListResponse) GetActivePollItem() *LiveChatMessage {
	if x != nil {
		return x.ActivePollItem
	}
	return nil
}

type LiveChatMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifies what kind of resource this is. Value: the fixed string
	// <code>"youtube#liveChatMessage"</code>.
	Kind *string `protobuf:"bytes,200,opt,name=kind" json:"kind,omitempty"`
	// Etag of this resource.
	Etag *string `protobuf:"bytes,201,opt,name=etag" json:"etag,omitempty"`
	// The ID that YouTube assigns to uniquely identify the message.
	Id *string `protobuf:"bytes,101,opt,name=id" json:"id,omitempty"`
	// The <code>snippet</code> object contains basic details about the message.
	Snippet *LiveChatMessageSnippet `protobuf:"bytes,2,opt,name=snippet" json:"snippet,omitempty"`
	// The <code>authorDetails</code> object contains basic details about the
	// user that posted this message.
	AuthorDetails *LiveChatMessageAuthorDetails `protobuf:"bytes,3,opt,name=author_details,json=authorDetails" json:"author_details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveChatMessage) Reset() {
	*x = LiveChatMessage{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChatMessage) ProtoMessage() {}

func (x *LiveChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChatMessage.ProtoReflect.Descriptor instead.
func (*LiveChatMessage) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{2}
}

func (x *LiveChatMessage) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *LiveChatMessage) GetEtag() string {
	if x != nil && x.Etag != nil {
		return *x.Etag
	}
	return ""
}

func (x *LiveChatMessage) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *LiveChatMessage) GetSnippet() *LiveChatMessageSnippet {
	if x != nil {
		return x.Snippet
	}
	return nil
}

func (x *LiveChatMessage) GetAuthorDetails() *LiveChatMessageAuthorDetails {
	if x != nil {
		return x.AuthorDetails
	}
	return nil
}

type LiveChatMessageAuthorDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The YouTube channel ID.
	ChannelId *string `protobuf:"bytes,10101,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	// The channel's URL.
	ChannelUrl *string `protobuf:"bytes,102,opt,name=channel_url,json=channelUrl" json:"channel_url,omitempty"`
	// The channel's display name.
	DisplayName *string `protobuf:"bytes,103,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// The channels's avatar URL.
	ProfileImageUrl *string `protobuf:"bytes,104,opt,name=profile_image_url,json=profileImageUrl" json:"profile_image_url,omitempty"`
	// Whether the author's identity has been verified by YouTube.
	IsVerified *bool `protobuf:"varint,4,opt,name=is_verified,json=isVerified" json:"is_verified,omitempty"`
	// Whether the author is the owner of the live chat.
	IsChatOwner *bool `protobuf:"varint,5,opt,name=is_chat_owner,json=isChatOwner" json:"is_chat_owner,omitempty"`
	// Whether the author is a sponsor of the live chat.
	IsChatSponsor *bool `protobuf:"varint,6,opt,name=is_chat_sponsor,json=isChatSponsor" json:"is_chat_sponsor,omitempty"`
	// Whether the author is a moderator of the live chat.
	IsChatModerator *bool `protobuf:"varint,7,opt,name=is_chat_moderator,json=isChatModerator" json:"is_chat_moderator,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *LiveChatMessageAuthorDetails) Reset() {
	*x = LiveChatMessageAuthorDetails{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveChatMessageAuthorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChatMessageAuthorDetails) ProtoMessage() {}

func (x *LiveChatMessageAuthorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChatMessageAuthorDetails.ProtoReflect.Descriptor instead.
func (*LiveChatMessageAuthorDetails) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{3}
}

func (x *LiveChatMessageAuthorDetails) GetChannelId() string {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return ""
}

func (x *LiveChatMessageAuthorDetails) GetChannelUrl() string {
	if x != nil && x.ChannelUrl != nil {
		return *x.ChannelUrl
	}
	return ""
}

func (x *LiveChatMessageAuthorDetails) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *LiveChatMessageAuthorDetails) GetProfileImageUrl() string {
	if x != nil && x.ProfileImageUrl != nil {
		return *x.ProfileImageUrl
	}
	return ""
}

func (x *LiveChatMessageAuthorDetails) GetIsVerified() bool {
	if x != nil && x.IsVerified != nil {
		return *x.IsVerified
	}
	return false
}

func (x *LiveChatMessageAuthorDetails) GetIsChatOwner() bool {
	if x != nil && x.IsChatOwner != nil {
		return *x.IsChatOwner
	}
	return false
}

func (x *LiveChatMessageAuthorDetails) GetIsChatSponsor() bool {
	if x != nil && x.IsChatSponsor != nil {
		return *x.IsChatSponsor
	}
	return false
}

func (x *LiveChatMessageAuthorDetails) GetIsChatModerator() bool {
	if x != nil && x.IsChatModerator != nil {
		return *x.IsChatModerator
	}
	return false
}

type LiveChatMessageSnippet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of message, this will always be present, it determines the
	// contents of the message as well as which fields will be present.
	Type       *LiveChatMessageSnippet_TypeWrapper_Type `protobuf:"varint,1,opt,name=type,enum=youtube.api.v3.LiveChatMessageSnippet_TypeWrapper_Type" json:"type,omitempty"`
	LiveChatId *string                                  `protobuf:"bytes,201,opt,name=live_chat_id,json=liveChatId" json:"live_chat_id,omitempty"`
	// The ID of the user that authored this message, this field is not always
	// filled.
	// textMessageEvent - the user that wrote the message
	// fanFundingEvent - the user that funded the broadcast
	// newSponsorEvent - the user that just became a sponsor
	// memberMilestoneChatEvent - the member that sent the message
	// membershipGiftingEvent - the user that made the purchase
	// giftMembershipReceivedEvent - the user that received the gift membership
	// messageDeletedEvent - the moderator that took the action
	// messageRetractedEvent - the author that retracted their message
	// userBannedEvent - the moderator that took the action
	// superChatEvent - the user that made the purchase
	// superStickerEvent - the user that made the purchase
	// pollEvent - the user that created the poll
	AuthorChannelId *string `protobuf:"bytes,301,opt,name=author_channel_id,json=authorChannelId" json:"author_channel_id,omitempty"`
	// The date and time when the message was orignally published. The value is
	// specified in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
	// format.
	PublishedAt *string `protobuf:"bytes,4,opt,name=published_at,json=publishedAt" json:"published_at,omitempty"`
	// Whether the message has display content that should be displayed to users.
	HasDisplayContent *bool `protobuf:"varint,17,opt,name=has_display_content,json=hasDisplayContent" json:"has_display_content,omitempty"`
	// Contains a string that can be displayed to the user.
	// If this field is not present the message is silent, at the moment only
	// messages of type TOMBSTONE and CHAT_ENDED_EVENT are silent.
	DisplayMessage *string `protobuf:"bytes,16,opt,name=display_message,json=displayMessage" json:"display_message,omitempty"`
	// Types that are valid to be assigned to DisplayedContent:
	//
	//	*LiveChatMessageSnippet_TextMessageDetails
	//	*LiveChatMessageSnippet_MessageDeletedDetails
	//	*LiveChatMessageSnippet_MessageRetractedDetails
	//	*LiveChatMessageSnippet_UserBannedDetails
	//	*LiveChatMessageSnippet_SuperChatDetails
	//	*LiveChatMessageSnippet_SuperStickerDetails
	//	*LiveChatMessageSnippet_NewSponsorDetails
	//	*LiveChatMessageSnippet_MemberMilestoneChatDetails
	//	*LiveChatMessageSnippet_MembershipGiftingDetails
	//	*LiveChatMessageSnippet_GiftMembershipReceivedDetails
	//	*LiveChatMessageSnippet_PollDetails
	DisplayedContent isLiveChatMessageSnippet_DisplayedContent `protobuf_oneof:"displayed_content"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LiveChatMessageSnippet) Reset() {
	*x = LiveChatMessageSnippet{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveChatMessageSnippet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChatMessageSnippet) ProtoMessage() {}

func (x *LiveChatMessageSnippet) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChatMessageSnippet.ProtoReflect.Descriptor instead.
func (*LiveChatMessageSnippet) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{4}
}

func (x *LiveChatMessageSnippet) GetType() LiveChatMessageSnippet_TypeWrapper_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return LiveChatMessageSnippet_TypeWrapper_INVALID_TYPE
}

func (x *LiveChatMessageSnippet) GetLiveChatId() string {
	if x != nil && x.LiveChatId != nil {
		return *x.LiveChatId
	}
	return ""
}

func (x *LiveChatMessageSnippet) GetAuthorChannelId() string {
	if x != nil && x.AuthorChannelId != nil {
		return *x.AuthorChannelId
	}
	return ""
}

func (x *LiveChatMessageSnippet) GetPublishedAt() string {
	if x != nil && x.PublishedAt != nil {
		return *x.PublishedAt
	}
	return ""
}

func (x *LiveChatMessageSnippet) GetHasDisplayContent() bool {
	if x != nil && x.HasDisplayContent != nil {
		return *x.HasDisplayContent
	}
	return false
}

func (x *LiveChatMessageSnippet) GetDisplayMessage() string {
	if x != nil && x.DisplayMessage != nil {
		return *x.DisplayMessage
	}
	return ""
}

func (x *LiveChatMessageSnippet) GetDisplayedContent() isLiveChatMessageSnippet_DisplayedContent {
	if x != nil {
		return x.DisplayedContent
	}
	return nil
}

func (x *LiveChatMessageSnippet) GetTextMessageDetails() *LiveChatTextMessageDetails {
	if x != nil {
		if x, ok := x.DisplayedContent.(*LiveChatMessageSnippet_TextMessageDetails); ok {
			return x.TextMessageDetails
		}
	}
	return nil
}

func (x *LiveChatMessageSnippet) GetMessageDeletedDetails() *LiveChatMessageDeletedDetails {
	if x != nil {
		if x, ok := x.DisplayedContent.(*LiveChatMessageSnippet_MessageDeletedDetails); ok {
			return x.MessageDeletedDetails
		}
	}
	return nil
}

func (x *LiveChatMessageSnippet) GetMessageRetractedDetails() *LiveChatMessageRetractedDetails {
	if x != nil {
		if x, ok := x.DisplayedContent.(*LiveChatMessageSnippet_MessageRetractedDetails); ok {
			return x.MessageRetractedDetails
		}
	}
	return nil
}

func (x *LiveChatMessageSnippet) GetUserBannedDetails() *LiveChatUserBannedMessageDetails {
	if x != nil {
		if x, ok := x.DisplayedContent.(*LiveChatMessageSnippet_UserBannedDetails); ok {
			return x.UserBannedDetails
		}
	}
	return nil
}

func (x *LiveChatMessageSnippet) GetSuperChatDetails() *LiveChatSuperChatDetails {
	if x != nil {
		if x, ok := x.DisplayedContent.(*LiveChatMessageSnippet_SuperChatDetails); ok {
			return x.SuperChatDetails
		}
	}
	return nil
}

func (x *LiveChatMessageSnippet) GetSuperStickerDetails() *LiveChatSuperStickerDetails {
	if x != nil {
		if x, ok := x.DisplayedContent.(*LiveChatMessageSnippet_SuperStickerDetails); ok {
			return x.SuperStickerDetails
		}
	}
	return nil
}

func (x *LiveChatMessageSnippet) GetNewSponsorDetails() *LiveChatNewSponsorDetails {
	if x != nil {
		if x, ok := x.DisplayedContent.(*LiveChatMessageSnippet_NewSponsorDetails); ok {
			return x.NewSponsorDetails
		}
	}
	return nil
}

func (x *LiveChatMessageSnippet) GetMemberMilestoneChatDetails() *LiveChatMemberMilestoneChatDetails {
	if x != nil {
		if x, ok := x.DisplayedContent.(*LiveChatMessageSnippet_MemberMilestoneChatDetails); ok {
			return x.MemberMilestoneChatDetails
		}
	}
	return nil
}

func (x *LiveChatMessageSnippet) GetMembershipGiftingDetails() *LiveChatMembershipGiftingDetails {
	if x != nil {
		if x, ok := x.DisplayedContent.(*LiveChatMessageSnippet_MembershipGiftingDetails); ok {
			return x.MembershipGiftingDetails
		}
	}
	return nil
}

func (x *LiveChatMessageSnippet) GetGiftMembershipReceivedDetails() *LiveChatGiftMembershipReceivedDetails {
	if x != nil {
		if x, ok := x.DisplayedContent.(*LiveChatMessageSnippet_GiftMembershipReceivedDetails); ok {
			return x.GiftMembershipReceivedDetails
		}
	}
	return nil
}

func (x *LiveChatMessageSnippet) GetPollDetails() *LiveChatPollDetails {
	if x != nil {
		if x, ok := x.DisplayedContent.(*LiveChatMessageSnippet_PollDetails); ok {
			return x.PollDetails
		}
	}
	return nil
}

type isLiveChatMessageSnippet_DisplayedContent interface {
	isLiveChatMessageSnippet_DisplayedContent()
}

type LiveChatMessageSnippet_TextMessageDetails struct {
	// Details about the text message, this is only set if the type is
	// 'textMessageEvent'.
	TextMessageDetails *LiveChatTextMessageDetails `protobuf:"bytes,19,opt,name=text_message_details,json=textMessageDetails,oneof"`
}

type LiveChatMessageSnippet_MessageDeletedDetails struct {
	MessageDeletedDetails *LiveChatMessageDeletedDetails `protobuf:"bytes,20,opt,name=message_deleted_details,json=messageDeletedDetails,oneof"`
}

type LiveChatMessageSnippet_MessageRetractedDetails struct {
	MessageRetractedDetails *LiveChatMessageRetractedDetails `protobuf:"bytes,21,opt,name=message_retracted_details,json=messageRetractedDetails,oneof"`
}

type LiveChatMessageSnippet_UserBannedDetails struct {
	UserBannedDetails *LiveChatUserBannedMessageDetails `protobuf:"bytes,22,opt,name=user_banned_details,json=userBannedDetails,oneof"`
}

type LiveChatMessageSnippet_SuperChatDetails struct {
	// Details about the Super Chat event, this is only set if the type is
	// 'superChatEvent'.
	SuperChatDetails *LiveChatSuperChatDetails `protobuf:"bytes,27,opt,name=super_chat_details,json=superChatDetails,oneof"`
}

type LiveChatMessageSnippet_SuperStickerDetails struct {
	// Details about the Super Sticker event, this is only set if the type is
	// 'superStickerEvent'.
	SuperStickerDetails *LiveChatSuperStickerDetails `protobuf:"bytes,28,opt,name=super_sticker_details,json=superStickerDetails,oneof"`
}

type LiveChatMessageSnippet_NewSponsorDetails struct {
	// Details about the New Member Announcement event, this is only set if
	// the type is 'newSponsorEvent'. Note that "member" is the new term for
	// "sponsor".
	NewSponsorDetails *LiveChatNewSponsorDetails `protobuf:"bytes,29,opt,name=new_sponsor_details,json=newSponsorDetails,oneof"`
}

type LiveChatMessageSnippet_MemberMilestoneChatDetails struct {
	// Details about the Member Milestone Chat event, this is only set if
	// the type is 'memberMilestoneChatEvent'.
	MemberMilestoneChatDetails *LiveChatMemberMilestoneChatDetails `protobuf:"bytes,30,opt,name=member_milestone_chat_details,json=memberMilestoneChatDetails,oneof"`
}

type LiveChatMessageSnippet_MembershipGiftingDetails struct {
	// Details about the Membership Gifting event, this is only set if the type
	// is 'membershipGiftingEvent'.
	MembershipGiftingDetails *LiveChatMembershipGiftingDetails `protobuf:"bytes,31,opt,name=membership_gifting_details,json=membershipGiftingDetails,oneof"`
}

type LiveChatMessageSnippet_GiftMembershipReceivedDetails struct {
	// Details about the Gift Membership Received event, this is only set if the
	// type is 'giftMembershipReceivedEvent'.
	GiftMembershipReceivedDetails *LiveChatGiftMembershipReceivedDetails `protobuf:"bytes,32,opt,name=gift_membership_received_details,json=giftMembershipReceivedDetails,oneof"`
}

type LiveChatMessageSnippet_PollDetails struct {
	// Details about the poll event, this is only set if the type is
	// 'pollEvent'.
	PollDetails *LiveChatPollDetails `protobuf:"bytes,33,opt,name=poll_details,json=pollDetails,oneof"`
}

func (*LiveChatMessageSnippet_TextMessageDetails) isLiveChatMessageSnippet_DisplayedContent() {}

func (*LiveChatMessageSnippet_MessageDeletedDetails) isLiveChatMessageSnippet_DisplayedContent() {}

func (*LiveChatMessageSnippet_MessageRetractedDetails) isLiveChatMessageSnippet_DisplayedContent() {}

func (*LiveChatMessageSnippet_UserBannedDetails) isLiveChatMessageSnippet_DisplayedContent() {}

func (*LiveChatMessageSnippet_SuperChatDetails) isLiveChatMessageSnippet_DisplayedContent() {}

func (*LiveChatMessageSnippet_SuperStickerDetails) isLiveChatMessageSnippet_DisplayedContent() {}

func (*LiveChatMessageSnippet_NewSponsorDetails) isLiveChatMessageSnippet_DisplayedContent() {}

func (*LiveChatMessageSnippet_MemberMilestoneChatDetails) isLiveChatMessageSnippet_DisplayedContent() {
}

func (*LiveChatMessageSnippet_MembershipGiftingDetails) isLiveChatMessageSnippet_DisplayedContent() {}

func (*LiveChatMessageSnippet_GiftMembershipReceivedDetails) isLiveChatMessageSnippet_DisplayedContent() {
}

func (*LiveChatMessageSnippet_PollDetails) isLiveChatMessageSnippet_DisplayedContent() {}

type LiveChatTextMessageDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The user's message.
	MessageText   *string `protobuf:"bytes,1,opt,name=message_text,json=messageText" json:"message_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveChatTextMessageDetails) Reset() {
	*x = LiveChatTextMessageDetails{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveChatTextMessageDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChatTextMessageDetails) ProtoMessage() {}

func (x *LiveChatTextMessageDetails) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChatTextMessageDetails.ProtoReflect.Descriptor instead.
func (*LiveChatTextMessageDetails) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{5}
}

func (x *LiveChatTextMessageDetails) GetMessageText() string {
	if x != nil && x.MessageText != nil {
		return *x.MessageText
	}
	return ""
}

type LiveChatMessageDeletedDetails struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	DeletedMessageId *string                `protobuf:"bytes,101,opt,name=deleted_message_id,json=deletedMessageId" json:"deleted_message_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LiveChatMessageDeletedDetails) Reset() {
	*x = LiveChatMessageDeletedDetails{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveChatMessageDeletedDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChatMessageDeletedDetails) ProtoMessage() {}

func (x *LiveChatMessageDeletedDetails) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChatMessageDeletedDetails.ProtoReflect.Descriptor instead.
func (*LiveChatMessageDeletedDetails) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{6}
}

func (x *LiveChatMessageDeletedDetails) GetDeletedMessageId() string {
	if x != nil && x.DeletedMessageId != nil {
		return *x.DeletedMessageId
	}
	return ""
}

type LiveChatMessageRetractedDetails struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	RetractedMessageId *string                `protobuf:"bytes,201,opt,name=retracted_message_id,json=retractedMessageId" json:"retracted_message_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *LiveChatMessageRetractedDetails) Reset() {
	*x = LiveChatMessageRetractedDetails{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveChatMessageRetractedDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChatMessageRetractedDetails) ProtoMessage() {}

func (x *LiveChatMessageRetractedDetails) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChatMessageRetractedDetails.ProtoReflect.Descriptor instead.
func (*LiveChatMessageRetractedDetails) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{7}
}

func (x *LiveChatMessageRetractedDetails) GetRetractedMessageId() string {
	if x != nil && x.RetractedMessageId != nil {
		return *x.RetractedMessageId
	}
	return ""
}

type LiveChatUserBannedMessageDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The details of the user that was banned.
	BannedUserDetails *ChannelProfileDetails `protobuf:"bytes,1,opt,name=banned_user_details,json=bannedUserDetails" json:"banned_user_details,omitempty"`
	// The type of ban.
	BanType *LiveChatUserBannedMessageDetails_BanTypeWrapper_BanType `protobuf:"varint,2,opt,name=ban_type,json=banType,enum=youtube.api.v3.LiveChatUserBannedMessageDetails_BanTypeWrapper_BanType" json:"ban_type,omitempty"`
	// The duration of the ban. This property is only present if the
	// <code>banType</code> is <code>temporary</code>.
	BanDurationSeconds *uint64 `protobuf:"varint,4,opt,name=ban_duration_seconds,json=banDurationSeconds" json:"ban_duration_seconds,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *LiveChatUserBannedMessageDetails) Reset() {
	*x = LiveChatUserBannedMessageDetails{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveChatUserBannedMessageDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChatUserBannedMessageDetails) ProtoMessage() {}

func (x *LiveChatUserBannedMessageDetails) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChatUserBannedMessageDetails.ProtoReflect.Descriptor instead.
func (*LiveChatUserBannedMessageDetails) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{8}
}

func (x *LiveChatUserBannedMessageDetails) GetBannedUserDetails() *ChannelProfileDetails {
	if x != nil {
		return x.BannedUserDetails
	}
	return nil
}

func (x *LiveChatUserBannedMessageDetails) GetBanType() LiveChatUserBannedMessageDetails_BanTypeWrapper_BanType {
	if x != nil && x.BanType != nil {
		return *x.BanType
	}
	return LiveChatUserBannedMessageDetails_BanTypeWrapper_PERMANENT
}

func (x *LiveChatUserBannedMessageDetails) GetBanDurationSeconds() uint64 {
	if x != nil && x.BanDurationSeconds != nil {
		return *x.BanDurationSeconds
	}
	return 0
}

type LiveChatSuperChatDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The amount purchased by the user, in micros (1,750,000 micros = 1.75).
	AmountMicros *uint64 `protobuf:"varint,1,opt,name=amount_micros,json=amountMicros" json:"amount_micros,omitempty"`
	// The currency in which the purchase was made.
	Currency *string `protobuf:"bytes,2,opt,name=currency" json:"currency,omitempty"`
	// A rendered string that displays the fund amount and currency to the user.
	AmountDisplayString *string `protobuf:"bytes,3,opt,name=amount_display_string,json=amountDisplayString" json:"amount_display_string,omitempty"`
	// The comment added by the user to this Super Chat event.
	UserComment *string `protobuf:"bytes,4,opt,name=user_comment,json=userComment" json:"user_comment,omitempty"`
	// The tier in which the amount belongs. Lower amounts belong to lower
	// tiers. The lowest tier is <code>1</code>.
	Tier          *uint32 `protobuf:"varint,5,opt,name=tier" json:"tier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveChatSuperChatDetails) Reset() {
	*x = LiveChatSuperChatDetails{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveChatSuperChatDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChatSuperChatDetails) ProtoMessage() {}

func (x *LiveChatSuperChatDetails) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChatSuperChatDetails.ProtoReflect.Descriptor instead.
func (*LiveChatSuperChatDetails) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{9}
}

func (x *LiveChatSuperChatDetails) GetAmountMicros() uint64 {
	if x != nil && x.AmountMicros != nil {
		return *x.AmountMicros
	}
	return 0
}

func (x *LiveChatSuperChatDetails) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *LiveChatSuperChatDetails) GetAmountDisplayString() string {
	if x != nil && x.AmountDisplayString != nil {
		return *x.AmountDisplayString
	}
	return ""
}

func (x *LiveChatSuperChatDetails) GetUserComment() string {
	if x != nil && x.UserComment != nil {
		return *x.UserComment
	}
	return ""
}

func (x *LiveChatSuperChatDetails) GetTier() uint32 {
	if x != nil && x.Tier != nil {
		return *x.Tier
	}
	return 0
}

type LiveChatSuperStickerDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The amount purchased by the user, in micros (1,750,000 micros = 1.75).
	AmountMicros *uint64 `protobuf:"varint,1,opt,name=amount_micros,json=amountMicros" json:"amount_micros,omitempty"`
	// The currency in which the purchase was made.
	Currency *string `protobuf:"bytes,2,opt,name=currency" json:"currency,omitempty"`
	// A rendered string that displays the fund amount and currency to the user.
	AmountDisplayString *string `protobuf:"bytes,3,opt,name=amount_display_string,json=amountDisplayString" json:"amount_display_string,omitempty"`
	// The tier in which the amount belongs. Lower amounts belong to lower
	// tiers. The lowest tier is <code>1</code>.
	Tier *uint32 `protobuf:"varint,4,opt,name=tier" json:"tier,omitempty"`
	// Information about the Super Sticker.
	SuperStickerMetadata *SuperStickerMetadata `protobuf:"bytes,5,opt,name=super_sticker_metadata,json=superStickerMetadata" json:"super_sticker_metadata,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *LiveChatSuperStickerDetails) Reset() {
	*x = LiveChatSuperStickerDetails{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveChatSuperStickerDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChatSuperStickerDetails) ProtoMessage() {}

func (x *LiveChatSuperStickerDetails) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChatSuperStickerDetails.ProtoReflect.Descriptor instead.
func (*LiveChatSuperStickerDetails) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{10}
}

func (x *LiveChatSuperStickerDetails) GetAmountMicros() uint64 {
	if x != nil && x.AmountMicros != nil {
		return *x.AmountMicros
	}
	return 0
}

func (x *LiveChatSuperStickerDetails) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *LiveChatSuperStickerDetails) GetAmountDisplayString() string {
	if x != nil && x.AmountDisplayString != nil {
		return *x.AmountDisplayString
	}
	return ""
}

func (x *LiveChatSuperStickerDetails) GetTier() uint32 {
	if x != nil && x.Tier != nil {
		return *x.Tier
	}
	return 0
}

func (x *LiveChatSuperStickerDetails) GetSuperStickerMetadata() *SuperStickerMetadata {
	if x != nil {
		return x.SuperStickerMetadata
	}
	return nil
}

type LiveChatFanFundingEventDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The amount of the fund.
	AmountMicros *uint64 `protobuf:"varint,1,opt,name=amount_micros,json=amountMicros" json:"amount_micros,omitempty"`
	// The currency in which the fund was made.
	Currency *string `protobuf:"bytes,2,opt,name=currency" json:"currency,omitempty"`
	// A rendered string that displays the fund amount and currency to the user.
	AmountDisplayString *string `protobuf:"bytes,3,opt,name=amount_display_string,json=amountDisplayString" json:"amount_display_string,omitempty"`
	// The comment added by the user to this fan funding event.
	UserComment   *string `protobuf:"bytes,4,opt,name=user_comment,json=userComment" json:"user_comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveChatFanFundingEventDetails) Reset() {
	*x = LiveChatFanFundingEventDetails{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveChatFanFundingEventDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChatFanFundingEventDetails) ProtoMessage() {}

func (x *LiveChatFanFundingEventDetails) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChatFanFundingEventDetails.ProtoReflect.Descriptor instead.
func (*LiveChatFanFundingEventDetails) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{11}
}

func (x *LiveChatFanFundingEventDetails) GetAmountMicros() uint64 {
	if x != nil && x.AmountMicros != nil {
		return *x.AmountMicros
	}
	return 0
}

func (x *LiveChatFanFundingEventDetails) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *LiveChatFanFundingEventDetails) GetAmountDisplayString() string {
	if x != nil && x.AmountDisplayString != nil {
		return *x.AmountDisplayString
	}
	return ""
}

func (x *LiveChatFanFundingEventDetails) GetUserComment() string {
	if x != nil && x.UserComment != nil {
		return *x.UserComment
	}
	return ""
}

type LiveChatNewSponsorDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the Level that the viewer just had joined. The Level names
	// are defined by the YouTube channel offering the Membership.
	//
	// In some situations this field isn't filled.
	MemberLevelName *string `protobuf:"bytes,1,opt,name=member_level_name,json=memberLevelName" json:"member_level_name,omitempty"`
	// If the viewer just had upgraded from a lower level. For viewers that
	// were not members at the time of purchase, this field is false.
	IsUpgrade     *bool `protobuf:"varint,2,opt,name=is_upgrade,json=isUpgrade" json:"is_upgrade,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveChatNewSponsorDetails) Reset() {
	*x = LiveChatNewSponsorDetails{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveChatNewSponsorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChatNewSponsorDetails) ProtoMessage() {}

func (x *LiveChatNewSponsorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChatNewSponsorDetails.ProtoReflect.Descriptor instead.
func (*LiveChatNewSponsorDetails) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{12}
}

func (x *LiveChatNewSponsorDetails) GetMemberLevelName() string {
	if x != nil && x.MemberLevelName != nil {
		return *x.MemberLevelName
	}
	return ""
}

func (x *LiveChatNewSponsorDetails) GetIsUpgrade() bool {
	if x != nil && x.IsUpgrade != nil {
		return *x.IsUpgrade
	}
	return false
}

type LiveChatMemberMilestoneChatDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the Level at which the viever is a member. The Level names
	// are defined by the YouTube channel offering the Membership.
	//
	// In some situations this field isn't filled.
	MemberLevelName *string `protobuf:"bytes,1,opt,name=member_level_name,json=memberLevelName" json:"member_level_name,omitempty"`
	// The total amount of months (rounded up) the viewer has been a member
	// that granted them this Member Milestone Chat. This is the same
	// number of months as is being displayed to YouTube users.
	MemberMonth *uint32 `protobuf:"varint,2,opt,name=member_month,json=memberMonth" json:"member_month,omitempty"`
	// The comment added by the member to this Member Milestone Chat.
	//
	// This field is empty for messages without a comment from the member.
	UserComment   *string `protobuf:"bytes,3,opt,name=user_comment,json=userComment" json:"user_comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveChatMemberMilestoneChatDetails) Reset() {
	*x = LiveChatMemberMilestoneChatDetails{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveChatMemberMilestoneChatDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChatMemberMilestoneChatDetails) ProtoMessage() {}

func (x *LiveChatMemberMilestoneChatDetails) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChatMemberMilestoneChatDetails.ProtoReflect.Descriptor instead.
func (*LiveChatMemberMilestoneChatDetails) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{13}
}

func (x *LiveChatMemberMilestoneChatDetails) GetMemberLevelName() string {
	if x != nil && x.MemberLevelName != nil {
		return *x.MemberLevelName
	}
	return ""
}

func (x *LiveChatMemberMilestoneChatDetails) GetMemberMonth() uint32 {
	if x != nil && x.MemberMonth != nil {
		return *x.MemberMonth
	}
	return 0
}

func (x *LiveChatMemberMilestoneChatDetails) GetUserComment() string {
	if x != nil && x.UserComment != nil {
		return *x.UserComment
	}
	return ""
}

type LiveChatMembershipGiftingDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of gift memberships purchased by the user.
	GiftMembershipsCount *int32 `protobuf:"varint,1,opt,name=gift_memberships_count,json=giftMembershipsCount" json:"gift_memberships_count,omitempty"`
	// The name of the level of the gift memberships purchased by the user. The
	// Level names are defined by the YouTube channel offering the Membership.
	//
	// In some situations this field isn't filled.
	GiftMembershipsLevelName *string `protobuf:"bytes,2,opt,name=gift_memberships_level_name,json=giftMembershipsLevelName" json:"gift_memberships_level_name,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *LiveChatMembershipGiftingDetails) Reset() {
	*x = LiveChatMembershipGiftingDetails{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveChatMembershipGiftingDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChatMembershipGiftingDetails) ProtoMessage() {}

func (x *LiveChatMembershipGiftingDetails) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChatMembershipGiftingDetails.ProtoReflect.Descriptor instead.
func (*LiveChatMembershipGiftingDetails) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{14}
}

func (x *LiveChatMembershipGiftingDetails) GetGiftMembershipsCount() int32 {
	if x != nil && x.GiftMembershipsCount != nil {
		return *x.GiftMembershipsCount
	}
	return 0
}

func (x *LiveChatMembershipGiftingDetails) GetGiftMembershipsLevelName() string {
	if x != nil && x.GiftMembershipsLevelName != nil {
		return *x.GiftMembershipsLevelName
	}
	return ""
}

type LiveChatGiftMembershipReceivedDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the Level at which the viewer is a member. This matches the
	// `snippet.membershipGiftingDetails.giftMembershipsLevelName` of the
	// associated membership gifting message. The Level names are defined by the
	// YouTube channel offering the Membership.
	//
	// In some situations this field isn't filled.
	MemberLevelName *string `protobuf:"bytes,1,opt,name=member_level_name,json=memberLevelName" json:"member_level_name,omitempty"`
	// The ID of the user that made the membership gifting purchase. This matches
	// the `snippet.authorChannelId` of the associated membership gifting message.
	GifterChannelId *string `protobuf:"bytes,2,opt,name=gifter_channel_id,json=gifterChannelId" json:"gifter_channel_id,omitempty"`
	// The ID of the membership gifting message that is related to this gift
	// membership. This ID will always refer to a message whose type is
	// 'membershipGiftingEvent'.
	AssociatedMembershipGiftingMessageId *string `protobuf:"bytes,3,opt,name=associated_membership_gifting_message_id,json=associatedMembershipGiftingMessageId" json:"associated_membership_gifting_message_id,omitempty"`
	unknownFields                        protoimpl.UnknownFields
	sizeCache                            protoimpl.SizeCache
}

func (x *LiveChatGiftMembershipReceivedDetails) Reset() {
	*x = LiveChatGiftMembershipReceivedDetails{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveChatGiftMembershipReceivedDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChatGiftMembershipReceivedDetails) ProtoMessage() {}

func (x *LiveChatGiftMembershipReceivedDetails) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChatGiftMembershipReceivedDetails.ProtoReflect.Descriptor instead.
func (*LiveChatGiftMembershipReceivedDetails) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{15}
}

func (x *LiveChatGiftMembershipReceivedDetails) GetMemberLevelName() string {
	if x != nil && x.MemberLevelName != nil {
		return *x.MemberLevelName
	}
	return ""
}

func (x *LiveChatGiftMembershipReceivedDetails) GetGifterChannelId() string {
	if x != nil && x.GifterChannelId != nil {
		return *x.GifterChannelId
	}
	return ""
}

func (x *LiveChatGiftMembershipReceivedDetails) GetAssociatedMembershipGiftingMessageId() string {
	if x != nil && x.AssociatedMembershipGiftingMessageId != nil {
		return *x.AssociatedMembershipGiftingMessageId
	}
	return ""
}

type LiveChatPollDetails struct {
	state         protoimpl.MessageState                            `protogen:"open.v1"`
	Metadata      *LiveChatPollDetails_PollMetadata                 `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	Status        *LiveChatPollDetails_PollStatusWrapper_PollStatus `protobuf:"varint,2,opt,name=status,enum=youtube.api.v3.LiveChatPollDetails_PollStatusWrapper_PollStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveChatPollDetails) Reset() {
	*x = LiveChatPollDetails{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveChatPollDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChatPollDetails) ProtoMessage() {}

func (x *LiveChatPollDetails) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChatPollDetails.ProtoReflect.Descriptor instead.
func (*LiveChatPollDetails) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{16}
}

func (x *LiveChatPollDetails) GetMetadata() *LiveChatPollDetails_PollMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *LiveChatPollDetails) GetStatus() LiveChatPollDetails_PollStatusWrapper_PollStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return LiveChatPollDetails_PollStatusWrapper_UNKNOWN
}

type SuperChatEventSnippet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Channel ID where the event occurred.
	ChannelId *string `protobuf:"bytes,101,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	// Details about the supporter.
	SupporterDetails *ChannelProfileDetails `protobuf:"bytes,2,opt,name=supporter_details,json=supporterDetails" json:"supporter_details,omitempty"`
	// The text contents of the comment left by the user.
	CommentText *string `protobuf:"bytes,3,opt,name=comment_text,json=commentText" json:"comment_text,omitempty"`
	// The date and time when the event occurred. The value is
	// specified in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
	// format.
	CreatedAt *string `protobuf:"bytes,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	// The purchase amount, in micros of the purchase currency.  For example, 1 is
	// represented as 1000000.
	AmountMicros *uint64 `protobuf:"varint,5,opt,name=amount_micros,json=amountMicros" json:"amount_micros,omitempty"`
	// The currency in which the purchase was made.  ISO 4217.
	Currency *string `protobuf:"bytes,6,opt,name=currency" json:"currency,omitempty"`
	// A rendered string that displays the purchase amount and currency
	// (e.g., "$1.00").  The string is rendered for the given language.
	DisplayString *string `protobuf:"bytes,7,opt,name=display_string,json=displayString" json:"display_string,omitempty"`
	// The tier for the paid message, which is based on the amount of money spent
	// to purchase the message.
	MessageType *uint32 `protobuf:"varint,8,opt,name=message_type,json=messageType" json:"message_type,omitempty"`
	// True if this event is a Super Sticker event.
	IsSuperStickerEvent *bool `protobuf:"varint,11,opt,name=is_super_sticker_event,json=isSuperStickerEvent" json:"is_super_sticker_event,omitempty"`
	// If this event is a Super Sticker event, this field will contain metadata
	// about the Super Sticker.
	SuperStickerMetadata *SuperStickerMetadata `protobuf:"bytes,12,opt,name=super_sticker_metadata,json=superStickerMetadata" json:"super_sticker_metadata,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SuperChatEventSnippet) Reset() {
	*x = SuperChatEventSnippet{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuperChatEventSnippet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperChatEventSnippet) ProtoMessage() {}

func (x *SuperChatEventSnippet) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperChatEventSnippet.ProtoReflect.Descriptor instead.
func (*SuperChatEventSnippet) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{17}
}

func (x *SuperChatEventSnippet) GetChannelId() string {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return ""
}

func (x *SuperChatEventSnippet) GetSupporterDetails() *ChannelProfileDetails {
	if x != nil {
		return x.SupporterDetails
	}
	return nil
}

func (x *SuperChatEventSnippet) GetCommentText() string {
	if x != nil && x.CommentText != nil {
		return *x.CommentText
	}
	return ""
}

func (x *SuperChatEventSnippet) GetCreatedAt() string {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return ""
}

func (x *SuperChatEventSnippet) GetAmountMicros() uint64 {
	if x != nil && x.AmountMicros != nil {
		return *x.AmountMicros
	}
	return 0
}

func (x *SuperChatEventSnippet) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *SuperChatEventSnippet) GetDisplayString() string {
	if x != nil && x.DisplayString != nil {
		return *x.DisplayString
	}
	return ""
}

func (x *SuperChatEventSnippet) GetMessageType() uint32 {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return 0
}

func (x *SuperChatEventSnippet) GetIsSuperStickerEvent() bool {
	if x != nil && x.IsSuperStickerEvent != nil {
		return *x.IsSuperStickerEvent
	}
	return false
}

func (x *SuperChatEventSnippet) GetSuperStickerMetadata() *SuperStickerMetadata {
	if x != nil {
		return x.SuperStickerMetadata
	}
	return nil
}

type SuperStickerMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier of the Super Sticker. This is a shorter form of the
	// alt_text that includes pack name and a recognizable characteristic of the
	// sticker.
	StickerId *string `protobuf:"bytes,1,opt,name=sticker_id,json=stickerId" json:"sticker_id,omitempty"`
	// Internationalized alt text that describes the sticker image and any
	// animation associated with it.
	AltText *string `protobuf:"bytes,2,opt,name=alt_text,json=altText" json:"alt_text,omitempty"`
	// Specifies the localization language in which the alt text is returned.
	AltTextLanguage *string `protobuf:"bytes,3,opt,name=alt_text_language,json=altTextLanguage" json:"alt_text_language,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SuperStickerMetadata) Reset() {
	*x = SuperStickerMetadata{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuperStickerMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperStickerMetadata) ProtoMessage() {}

func (x *SuperStickerMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperStickerMetadata.ProtoReflect.Descriptor instead.
func (*SuperStickerMetadata) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{18}
}

func (x *SuperStickerMetadata) GetStickerId() string {
	if x != nil && x.StickerId != nil {
		return *x.StickerId
	}
	return ""
}

func (x *SuperStickerMetadata) GetAltText() string {
	if x != nil && x.AltText != nil {
		return *x.AltText
	}
	return ""
}

func (x *SuperStickerMetadata) GetAltTextLanguage() string {
	if x != nil && x.AltTextLanguage != nil {
		return *x.AltTextLanguage
	}
	return ""
}

type ChannelProfileDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The YouTube channel ID.
	ChannelId *string `protobuf:"bytes,101,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	// The channel's URL.
	ChannelUrl *string `protobuf:"bytes,2,opt,name=channel_url,json=channelUrl" json:"channel_url,omitempty"`
	// The channel's display name.
	DisplayName *string `protobuf:"bytes,3,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// The channels's avatar URL.
	ProfileImageUrl *string `protobuf:"bytes,4,opt,name=profile_image_url,json=profileImageUrl" json:"profile_image_url,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ChannelProfileDetails) Reset() {
	*x = ChannelProfileDetails{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelProfileDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelProfileDetails) ProtoMessage() {}

func (x *ChannelProfileDetails) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelProfileDetails.ProtoReflect.Descriptor instead.
func (*ChannelProfileDetails) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{19}
}

func (x *ChannelProfileDetails) GetChannelId() string {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return ""
}

func (x *ChannelProfileDetails) GetChannelUrl() string {
	if x != nil && x.ChannelUrl != nil {
		return *x.ChannelUrl
	}
	return ""
}

func (x *ChannelProfileDetails) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *ChannelProfileDetails) GetProfileImageUrl() string {
	if x != nil && x.ProfileImageUrl != nil {
		return *x.ProfileImageUrl
	}
	return ""
}

// Paging details for lists of resources, including total number of items
// available and number of resources returned in a single page.
type PageInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The total number of results in the result set.
	TotalResults *int32 `protobuf:"varint,1,opt,name=total_results,json=totalResults" json:"total_results,omitempty"`
	// The number of results included in the API response.
	ResultsPerPage *int32 `protobuf:"varint,2,opt,name=results_per_page,json=resultsPerPage" json:"results_per_page,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{20}
}

func (x *PageInfo) GetTotalResults() int32 {
	if x != nil && x.TotalResults != nil {
		return *x.TotalResults
	}
	return 0
}

func (x *PageInfo) GetResultsPerPage() int32 {
	if x != nil && x.ResultsPerPage != nil {
		return *x.ResultsPerPage
	}
	return 0
}

type LiveChatMessageSnippet_TypeWrapper struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveChatMessageSnippet_TypeWrapper) Reset() {
	*x = LiveChatMessageSnippet_TypeWrapper{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveChatMessageSnippet_TypeWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChatMessageSnippet_TypeWrapper) ProtoMessage() {}

func (x *LiveChatMessageSnippet_TypeWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChatMessageSnippet_TypeWrapper.ProtoReflect.Descriptor instead.
func (*LiveChatMessageSnippet_TypeWrapper) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{4, 0}
}

type LiveChatUserBannedMessageDetails_BanTypeWrapper struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveChatUserBannedMessageDetails_BanTypeWrapper) Reset() {
	*x = LiveChatUserBannedMessageDetails_BanTypeWrapper{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveChatUserBannedMessageDetails_BanTypeWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChatUserBannedMessageDetails_BanTypeWrapper) ProtoMessage() {}

func (x *LiveChatUserBannedMessageDetails_BanTypeWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChatUserBannedMessageDetails_BanTypeWrapper.ProtoReflect.Descriptor instead.
func (*LiveChatUserBannedMessageDetails_BanTypeWrapper) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{8, 0}
}

type LiveChatPollDetails_PollMetadata struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	QuestionText *string                `protobuf:"bytes,1,opt,name=question_text,json=questionText" json:"question_text,omitempty"`
	// The options will be returned in the order that is displayed in 1P
	Options       []*LiveChatPollDetails_PollMetadata_PollOption `protobuf:"bytes,2,rep,name=options" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveChatPollDetails_PollMetadata) Reset() {
	*x = LiveChatPollDetails_PollMetadata{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveChatPollDetails_PollMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChatPollDetails_PollMetadata) ProtoMessage() {}

func (x *LiveChatPollDetails_PollMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChatPollDetails_PollMetadata.ProtoReflect.Descriptor instead.
func (*LiveChatPollDetails_PollMetadata) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{16, 0}
}

func (x *LiveChatPollDetails_PollMetadata) GetQuestionText() string {
	if x != nil && x.QuestionText != nil {
		return *x.QuestionText
	}
	return ""
}

func (x *LiveChatPollDetails_PollMetadata) GetOptions() []*LiveChatPollDetails_PollMetadata_PollOption {
	if x != nil {
		return x.Options
	}
	return nil
}

// Current point in the polls lifecycle.
type LiveChatPollDetails_PollStatusWrapper struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveChatPollDetails_PollStatusWrapper) Reset() {
	*x = LiveChatPollDetails_PollStatusWrapper{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveChatPollDetails_PollStatusWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChatPollDetails_PollStatusWrapper) ProtoMessage() {}

func (x *LiveChatPollDetails_PollStatusWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChatPollDetails_PollStatusWrapper.ProtoReflect.Descriptor instead.
func (*LiveChatPollDetails_PollStatusWrapper) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{16, 1}
}

type LiveChatPollDetails_PollMetadata_PollOption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OptionText    *string                `protobuf:"bytes,1,opt,name=option_text,json=optionText" json:"option_text,omitempty"`
	Tally         *int64                 `protobuf:"varint,2,opt,name=tally" json:"tally,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveChatPollDetails_PollMetadata_PollOption) Reset() {
	*x = LiveChatPollDetails_PollMetadata_PollOption{}
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveChatPollDetails_PollMetadata_PollOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChatPollDetails_PollMetadata_PollOption) ProtoMessage() {}

func (x *LiveChatPollDetails_PollMetadata_PollOption) ProtoReflect() protoreflect.Message {
	mi := &file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChatPollDetails_PollMetadata_PollOption.ProtoReflect.Descriptor instead.
func (*LiveChatPollDetails_PollMetadata_PollOption) Descriptor() ([]byte, []int) {
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP(), []int{16, 0, 0}
}

func (x *LiveChatPollDetails_PollMetadata_PollOption) GetOptionText() string {
	if x != nil && x.OptionText != nil {
		return *x.OptionText
	}
	return ""
}

func (x *LiveChatPollDetails_PollMetadata_PollOption) GetTally() int64 {
	if x != nil && x.Tally != nil {
		return *x.Tally
	}
	return 0
}

var File_apps_reader_internal_infra_youtube_stream_list_proto protoreflect.FileDescriptor

const file_apps_reader_internal_infra_youtube_stream_list_proto_rawDesc = "" +
	"\n" +
	"4apps/reader/internal/infra/youtube/stream_list.proto\x12\x0eyoutube.api.v3\"\xd0\x01\n" +
	"\x1aLiveChatMessageListRequest\x12 \n" +
	"\flive_chat_id\x18\x01 \x01(\tR\n" +
	"liveChatId\x12\x0e\n" +
	"\x02hl\x18\x02 \x01(\tR\x02hl\x12,\n" +
	"\x12profile_image_size\x18\x03 \x01(\rR\x10profileImageSize\x12\x1f\n" +
	"\vmax_results\x18b \x01(\rR\n" +
	"maxResults\x12\x1d\n" +
	"\n" +
	"page_token\x18c \x01(\tR\tpageToken\x12\x12\n" +
	"\x04part\x18d \x03(\tR\x04part\"\xcc\x02\n" +
	"\x1bLiveChatMessageListResponse\x12\x13\n" +
	"\x04kind\x18\xc8\x01 \x01(\tR\x04kind\x12\x13\n" +
	"\x04etag\x18\xc9\x01 \x01(\tR\x04etag\x12\x1d\n" +
	"\n" +
	"offline_at\x18\x02 \x01(\tR\tofflineAt\x126\n" +
	"\tpage_info\x18\xec\a \x01(\v2\x18.youtube.api.v3.PageInfoR\bpageInfo\x12(\n" +
	"\x0fnext_page_token\x18\xfa\x91\x06 \x01(\tR\rnextPageToken\x126\n" +
	"\x05items\x18\xef\a \x03(\v2\x1f.youtube.api.v3.LiveChatMessageR\x05items\x12J\n" +
	"\x10active_poll_item\x18\xf0\a \x01(\v2\x1f.youtube.api.v3.LiveChatMessageR\x0eactivePollItem\"\xe2\x01\n" +
	"\x0fLiveChatMessage\x12\x13\n" +
	"\x04kind\x18\xc8\x01 \x01(\tR\x04kind\x12\x13\n" +
	"\x04etag\x18\xc9\x01 \x01(\tR\x04etag\x12\x0e\n" +
	"\x02id\x18e \x01(\tR\x02id\x12@\n" +
	"\asnippet\x18\x02 \x01(\v2&.youtube.api.v3.LiveChatMessageSnippetR\asnippet\x12S\n" +
	"\x0eauthor_details\x18\x03 \x01(\v2,.youtube.api.v3.LiveChatMessageAuthorDetailsR\rauthorDetails\"\xc7\x02\n" +
	"\x1cLiveChatMessageAuthorDetails\x12\x1e\n" +
	"\n" +
	"channel_id\x18\xf5N \x01(\tR\tchannelId\x12\x1f\n" +
	"\vchannel_url\x18f \x01(\tR\n" +
	"channelUrl\x12!\n" +
	"\fdisplay_name\x18g \x01(\tR\vdisplayName\x12*\n" +
	"\x11profile_image_url\x18h \x01(\tR\x0fprofileImageUrl\x12\x1f\n" +
	"\vis_verified\x18\x04 \x01(\bR\n" +
	"isVerified\x12\"\n" +
	"\ris_chat_owner\x18\x05 \x01(\bR\visChatOwner\x12&\n" +
	"\x0fis_chat_sponsor\x18\x06 \x01(\bR\risChatSponsor\x12*\n" +
	"\x11is_chat_moderator\x18\a \x01(\bR\x0fisChatModerator\"\x83\x0f\n" +
	"\x16LiveChatMessageSnippet\x12K\n" +
	"\x04type\x18\x01 \x01(\x0e27.youtube.api.v3.LiveChatMessageSnippet.TypeWrapper.TypeR\x04type\x12!\n" +
	"\flive_chat_id\x18\xc9\x01 \x01(\tR\n" +
	"liveChatId\x12+\n" +
	"\x11author_channel_id\x18\xad\x02 \x01(\tR\x0fauthorChannelId\x12!\n" +
	"\fpublished_at\x18\x04 \x01(\tR\vpublishedAt\x12.\n" +
	"\x13has_display_content\x18\x11 \x01(\bR\x11hasDisplayContent\x12'\n" +
	"\x0fdisplay_message\x18\x10 \x01(\tR\x0edisplayMessage\x12^\n" +
	"\x14text_message_details\x18\x13 \x01(\v2*.youtube.api.v3.LiveChatTextMessageDetailsH\x00R\x12textMessageDetails\x12g\n" +
	"\x17message_deleted_details\x18\x14 \x01(\v2-.youtube.api.v3.LiveChatMessageDeletedDetailsH\x00R\x15messageDeletedDetails\x12m\n" +
	"\x19message_retracted_details\x18\x15 \x01(\v2/.youtube.api.v3.LiveChatMessageRetractedDetailsH\x00R\x17messageRetractedDetails\x12b\n" +
	"\x13user_banned_details\x18\x16 \x01(\v20.youtube.api.v3.LiveChatUserBannedMessageDetailsH\x00R\x11userBannedDetails\x12X\n" +
	"\x12super_chat_details\x18\x1b \x01(\v2(.youtube.api.v3.LiveChatSuperChatDetailsH\x00R\x10superChatDetails\x12a\n" +
	"\x15super_sticker_details\x18\x1c \x01(\v2+.youtube.api.v3.LiveChatSuperStickerDetailsH\x00R\x13superStickerDetails\x12[\n" +
	"\x13new_sponsor_details\x18\x1d \x01(\v2).youtube.api.v3.LiveChatNewSponsorDetailsH\x00R\x11newSponsorDetails\x12w\n" +
	"\x1dmember_milestone_chat_details\x18\x1e \x01(\v22.youtube.api.v3.LiveChatMemberMilestoneChatDetailsH\x00R\x1amemberMilestoneChatDetails\x12p\n" +
	"\x1amembership_gifting_details\x18\x1f \x01(\v20.youtube.api.v3.LiveChatMembershipGiftingDetailsH\x00R\x18membershipGiftingDetails\x12\x80\x01\n" +
	" gift_membership_received_details\x18  \x01(\v25.youtube.api.v3.LiveChatGiftMembershipReceivedDetailsH\x00R\x1dgiftMembershipReceivedDetails\x12H\n" +
	"\fpoll_details\x18! \x01(\v2#.youtube.api.v3.LiveChatPollDetailsH\x00R\vpollDetails\x1a\xcc\x03\n" +
	"\vTypeWrapper\"\xbc\x03\n" +
	"\x04Type\x12\x10\n" +
	"\fINVALID_TYPE\x10\x00\x12\x16\n" +
	"\x12TEXT_MESSAGE_EVENT\x10\x01\x12\r\n" +
	"\tTOMBSTONE\x10\x02\x12\x15\n" +
	"\x11FAN_FUNDING_EVENT\x10\x03\x12\x14\n" +
	"\x10CHAT_ENDED_EVENT\x10\x04\x12#\n" +
	"\x1fSPONSOR_ONLY_MODE_STARTED_EVENT\x10\x05\x12!\n" +
	"\x1dSPONSOR_ONLY_MODE_ENDED_EVENT\x10\x06\x12\x15\n" +
	"\x11NEW_SPONSOR_EVENT\x10\a\x12\x1f\n" +
	"\x1bMEMBER_MILESTONE_CHAT_EVENT\x10\x11\x12\x1c\n" +
	"\x18MEMBERSHIP_GIFTING_EVENT\x10\x12\x12\"\n" +
	"\x1eGIFT_MEMBERSHIP_RECEIVED_EVENT\x10\x13\x12\x19\n" +
	"\x15MESSAGE_DELETED_EVENT\x10\b\x12\x1b\n" +
	"\x17MESSAGE_RETRACTED_EVENT\x10\t\x12\x15\n" +
	"\x11USER_BANNED_EVENT\x10\n" +
	"\x12\x14\n" +
	"\x10SUPER_CHAT_EVENT\x10\x0f\x12\x17\n" +
	"\x13SUPER_STICKER_EVENT\x10\x10\x12\x0e\n" +
	"\n" +
	"POLL_EVENT\x10\x14B\x13\n" +
	"\x11displayed_content\"?\n" +
	"\x1aLiveChatTextMessageDetails\x12!\n" +
	"\fmessage_text\x18\x01 \x01(\tR\vmessageText\"M\n" +
	"\x1dLiveChatMessageDeletedDetails\x12,\n" +
	"\x12deleted_message_id\x18e \x01(\tR\x10deletedMessageId\"T\n" +
	"\x1fLiveChatMessageRetractedDetails\x121\n" +
	"\x14retracted_message_id\x18\xc9\x01 \x01(\tR\x12retractedMessageId\"\xca\x02\n" +
	" LiveChatUserBannedMessageDetails\x12U\n" +
	"\x13banned_user_details\x18\x01 \x01(\v2%.youtube.api.v3.ChannelProfileDetailsR\x11bannedUserDetails\x12b\n" +
	"\bban_type\x18\x02 \x01(\x0e2G.youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper.BanTypeR\abanType\x120\n" +
	"\x14ban_duration_seconds\x18\x04 \x01(\x04R\x12banDurationSeconds\x1a9\n" +
	"\x0eBanTypeWrapper\"'\n" +
	"\aBanType\x12\r\n" +
	"\tPERMANENT\x10\x01\x12\r\n" +
	"\tTEMPORARY\x10\x02\"\xc6\x01\n" +
	"\x18LiveChatSuperChatDetails\x12#\n" +
	"\ramount_micros\x18\x01 \x01(\x04R\famountMicros\x12\x1a\n" +
	"\bcurrency\x18\x02 \x01(\tR\bcurrency\x122\n" +
	"\x15amount_display_string\x18\x03 \x01(\tR\x13amountDisplayString\x12!\n" +
	"\fuser_comment\x18\x04 \x01(\tR\vuserComment\x12\x12\n" +
	"\x04tier\x18\x05 \x01(\rR\x04tier\"\x82\x02\n" +
	"\x1bLiveChatSuperStickerDetails\x12#\n" +
	"\ramount_micros\x18\x01 \x01(\x04R\famountMicros\x12\x1a\n" +
	"\bcurrency\x18\x02 \x01(\tR\bcurrency\x122\n" +
	"\x15amount_display_string\x18\x03 \x01(\tR\x13amountDisplayString\x12\x12\n" +
	"\x04tier\x18\x04 \x01(\rR\x04tier\x12Z\n" +
	"\x16super_sticker_metadata\x18\x05 \x01(\v2$.youtube.api.v3.SuperStickerMetadataR\x14superStickerMetadata\"\xb8\x01\n" +
	"\x1eLiveChatFanFundingEventDetails\x12#\n" +
	"\ramount_micros\x18\x01 \x01(\x04R\famountMicros\x12\x1a\n" +
	"\bcurrency\x18\x02 \x01(\tR\bcurrency\x122\n" +
	"\x15amount_display_string\x18\x03 \x01(\tR\x13amountDisplayString\x12!\n" +
	"\fuser_comment\x18\x04 \x01(\tR\vuserComment\"f\n" +
	"\x19LiveChatNewSponsorDetails\x12*\n" +
	"\x11member_level_name\x18\x01 \x01(\tR\x0fmemberLevelName\x12\x1d\n" +
	"\n" +
	"is_upgrade\x18\x02 \x01(\bR\tisUpgrade\"\x96\x01\n" +
	"\"LiveChatMemberMilestoneChatDetails\x12*\n" +
	"\x11member_level_name\x18\x01 \x01(\tR\x0fmemberLevelName\x12!\n" +
	"\fmember_month\x18\x02 \x01(\rR\vmemberMonth\x12!\n" +
	"\fuser_comment\x18\x03 \x01(\tR\vuserComment\"\x97\x01\n" +
	" LiveChatMembershipGiftingDetails\x124\n" +
	"\x16gift_memberships_count\x18\x01 \x01(\x05R\x14giftMembershipsCount\x12=\n" +
	"\x1bgift_memberships_level_name\x18\x02 \x01(\tR\x18giftMembershipsLevelName\"\xd7\x01\n" +
	"%LiveChatGiftMembershipReceivedDetails\x12*\n" +
	"\x11member_level_name\x18\x01 \x01(\tR\x0fmemberLevelName\x12*\n" +
	"\x11gifter_channel_id\x18\x02 \x01(\tR\x0fgifterChannelId\x12V\n" +
	"(associated_membership_gifting_message_id\x18\x03 \x01(\tR$associatedMembershipGiftingMessageId\"\xd7\x03\n" +
	"\x13LiveChatPollDetails\x12L\n" +
	"\bmetadata\x18\x01 \x01(\v20.youtube.api.v3.LiveChatPollDetails.PollMetadataR\bmetadata\x12X\n" +
	"\x06status\x18\x02 \x01(\x0e2@.youtube.api.v3.LiveChatPollDetails.PollStatusWrapper.PollStatusR\x06status\x1a\xcf\x01\n" +
	"\fPollMetadata\x12#\n" +
	"\rquestion_text\x18\x01 \x01(\tR\fquestionText\x12U\n" +
	"\aoptions\x18\x02 \x03(\v2;.youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOptionR\aoptions\x1aC\n" +
	"\n" +
	"PollOption\x12\x1f\n" +
	"\voption_text\x18\x01 \x01(\tR\n" +
	"optionText\x12\x14\n" +
	"\x05tally\x18\x02 \x01(\x03R\x05tally\x1aF\n" +
	"\x11PollStatusWrapper\"1\n" +
	"\n" +
	"PollStatus\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\n" +
	"\n" +
	"\x06ACTIVE\x10\x01\x12\n" +
	"\n" +
	"\x06CLOSED\x10\x02\"\xe8\x03\n" +
	"\x15SuperChatEventSnippet\x12\x1d\n" +
	"\n" +
	"channel_id\x18e \x01(\tR\tchannelId\x12R\n" +
	"\x11supporter_details\x18\x02 \x01(\v2%.youtube.api.v3.ChannelProfileDetailsR\x10supporterDetails\x12!\n" +
	"\fcomment_text\x18\x03 \x01(\tR\vcommentText\x12\x1d\n" +
	"\n" +
	"created_at\x18\x04 \x01(\tR\tcreatedAt\x12#\n" +
	"\ramount_micros\x18\x05 \x01(\x04R\famountMicros\x12\x1a\n" +
	"\bcurrency\x18\x06 \x01(\tR\bcurrency\x12%\n" +
	"\x0edisplay_string\x18\a \x01(\tR\rdisplayString\x12!\n" +
	"\fmessage_type\x18\b \x01(\rR\vmessageType\x123\n" +
	"\x16is_super_sticker_event\x18\v \x01(\bR\x13isSuperStickerEvent\x12Z\n" +
	"\x16super_sticker_metadata\x18\f \x01(\v2$.youtube.api.v3.SuperStickerMetadataR\x14superStickerMetadata\"|\n" +
	"\x14SuperStickerMetadata\x12\x1d\n" +
	"\n" +
	"sticker_id\x18\x01 \x01(\tR\tstickerId\x12\x19\n" +
	"\balt_text\x18\x02 \x01(\tR\aaltText\x12*\n" +
	"\x11alt_text_language\x18\x03 \x01(\tR\x0faltTextLanguage\"\xa6\x01\n" +
	"\x15ChannelProfileDetails\x12\x1d\n" +
	"\n" +
	"channel_id\x18e \x01(\tR\tchannelId\x12\x1f\n" +
	"\vchannel_url\x18\x02 \x01(\tR\n" +
	"channelUrl\x12!\n" +
	"\fdisplay_name\x18\x03 \x01(\tR\vdisplayName\x12*\n" +
	"\x11profile_image_url\x18\x04 \x01(\tR\x0fprofileImageUrl\"Y\n" +
	"\bPageInfo\x12#\n" +
	"\rtotal_results\x18\x01 \x01(\x05R\ftotalResults\x12(\n" +
	"\x10results_per_page\x18\x02 \x01(\x05R\x0eresultsPerPage2\x89\x01\n" +
	"\x1cV3DataLiveChatMessageService\x12i\n" +
	"\n" +
	"StreamList\x12*.youtube.api.v3.LiveChatMessageListRequest\x1a+.youtube.api.v3.LiveChatMessageListResponse\"\x000\x01BTZRgithub.com/natsoman/youtube-chat-reader/apps/reader/internal/infra/youtube;youtube"

var (
	file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescOnce sync.Once
	file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescData []byte
)

func file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescGZIP() []byte {
	file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescOnce.Do(func() {
		file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_apps_reader_internal_infra_youtube_stream_list_proto_rawDesc), len(file_apps_reader_internal_infra_youtube_stream_list_proto_rawDesc)))
	})
	return file_apps_reader_internal_infra_youtube_stream_list_proto_rawDescData
}

var file_apps_reader_internal_infra_youtube_stream_list_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_apps_reader_internal_infra_youtube_stream_list_proto_goTypes = []any{
	(LiveChatMessageSnippet_TypeWrapper_Type)(0),                 // 0: youtube.api.v3.LiveChatMessageSnippet.TypeWrapper.Type
	(LiveChatUserBannedMessageDetails_BanTypeWrapper_BanType)(0), // 1: youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper.BanType
	(LiveChatPollDetails_PollStatusWrapper_PollStatus)(0),        // 2: youtube.api.v3.LiveChatPollDetails.PollStatusWrapper.PollStatus
	(*LiveChatMessageListRequest)(nil),                           // 3: youtube.api.v3.LiveChatMessageListRequest
	(*LiveChatMessageListResponse)(nil),                          // 4: youtube.api.v3.LiveChatMessageListResponse
	(*LiveChatMessage)(nil),                                      // 5: youtube.api.v3.LiveChatMessage
	(*LiveChatMessageAuthorDetails)(nil),                         // 6: youtube.api.v3.LiveChatMessageAuthorDetails
	(*LiveChatMessageSnippet)(nil),                               // 7: youtube.api.v3.LiveChatMessageSnippet
	(*LiveChatTextMessageDetails)(nil),                           // 8: youtube.api.v3.LiveChatTextMessageDetails
	(*LiveChatMessageDeletedDetails)(nil),                        // 9: youtube.api.v3.LiveChatMessageDeletedDetails
	(*LiveChatMessageRetractedDetails)(nil),                      // 10: youtube.api.v3.LiveChatMessageRetractedDetails
	(*LiveChatUserBannedMessageDetails)(nil),                     // 11: youtube.api.v3.LiveChatUserBannedMessageDetails
	(*LiveChatSuperChatDetails)(nil),                             // 12: youtube.api.v3.LiveChatSuperChatDetails
	(*LiveChatSuperStickerDetails)(nil),                          // 13: youtube.api.v3.LiveChatSuperStickerDetails
	(*LiveChatFanFundingEventDetails)(nil),                       // 14: youtube.api.v3.LiveChatFanFundingEventDetails
	(*LiveChatNewSponsorDetails)(nil),                            // 15: youtube.api.v3.LiveChatNewSponsorDetails
	(*LiveChatMemberMilestoneChatDetails)(nil),                   // 16: youtube.api.v3.LiveChatMemberMilestoneChatDetails
	(*LiveChatMembershipGiftingDetails)(nil),                     // 17: youtube.api.v3.LiveChatMembershipGiftingDetails
	(*LiveChatGiftMembershipReceivedDetails)(nil),                // 18: youtube.api.v3.LiveChatGiftMembershipReceivedDetails
	(*LiveChatPollDetails)(nil),                                  // 19: youtube.api.v3.LiveChatPollDetails
	(*SuperChatEventSnippet)(nil),                                // 20: youtube.api.v3.SuperChatEventSnippet
	(*SuperStickerMetadata)(nil),                                 // 21: youtube.api.v3.SuperStickerMetadata
	(*ChannelProfileDetails)(nil),                                // 22: youtube.api.v3.ChannelProfileDetails
	(*PageInfo)(nil),                                             // 23: youtube.api.v3.PageInfo
	(*LiveChatMessageSnippet_TypeWrapper)(nil),                   // 24: youtube.api.v3.LiveChatMessageSnippet.TypeWrapper
	(*LiveChatUserBannedMessageDetails_BanTypeWrapper)(nil),      // 25: youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper
	(*LiveChatPollDetails_PollMetadata)(nil),                     // 26: youtube.api.v3.LiveChatPollDetails.PollMetadata
	(*LiveChatPollDetails_PollStatusWrapper)(nil),                // 27: youtube.api.v3.LiveChatPollDetails.PollStatusWrapper
	(*LiveChatPollDetails_PollMetadata_PollOption)(nil),          // 28: youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption
}
var file_apps_reader_internal_infra_youtube_stream_list_proto_depIdxs = []int32{
	23, // 0: youtube.api.v3.LiveChatMessageListResponse.page_info:type_name -> youtube.api.v3.PageInfo
	5,  // 1: youtube.api.v3.LiveChatMessageListResponse.items:type_name -> youtube.api.v3.LiveChatMessage
	5,  // 2: youtube.api.v3.LiveChatMessageListResponse.active_poll_item:type_name -> youtube.api.v3.LiveChatMessage
	7,  // 3: youtube.api.v3.LiveChatMessage.snippet:type_name -> youtube.api.v3.LiveChatMessageSnippet
	6,  // 4: youtube.api.v3.LiveChatMessage.author_details:type_name -> youtube.api.v3.LiveChatMessageAuthorDetails
	0,  // 5: youtube.api.v3.LiveChatMessageSnippet.type:type_name -> youtube.api.v3.LiveChatMessageSnippet.TypeWrapper.Type
	8,  // 6: youtube.api.v3.LiveChatMessageSnippet.text_message_details:type_name -> youtube.api.v3.LiveChatTextMessageDetails
	9,  // 7: youtube.api.v3.LiveChatMessageSnippet.message_deleted_details:type_name -> youtube.api.v3.LiveChatMessageDeletedDetails
	10, // 8: youtube.api.v3.LiveChatMessageSnippet.message_retracted_details:type_name -> youtube.api.v3.LiveChatMessageRetractedDetails
	11, // 9: youtube.api.v3.LiveChatMessageSnippet.user_banned_details:type_name -> youtube.api.v3.LiveChatUserBannedMessageDetails
	12, // 10: youtube.api.v3.LiveChatMessageSnippet.super_chat_details:type_name -> youtube.api.v3.LiveChatSuperChatDetails
	13, // 11: youtube.api.v3.LiveChatMessageSnippet.super_sticker_details:type_name -> youtube.api.v3.LiveChatSuperStickerDetails
	15, // 12: youtube.api.v3.LiveChatMessageSnippet.new_sponsor_details:type_name -> youtube.api.v3.LiveChatNewSponsorDetails
	16, // 13: youtube.api.v3.LiveChatMessageSnippet.member_milestone_chat_details:type_name -> youtube.api.v3.LiveChatMemberMilestoneChatDetails
	17, // 14: youtube.api.v3.LiveChatMessageSnippet.membership_gifting_details:type_name -> youtube.api.v3.LiveChatMembershipGiftingDetails
	18, // 15: youtube.api.v3.LiveChatMessageSnippet.gift_membership_received_details:type_name -> youtube.api.v3.LiveChatGiftMembershipReceivedDetails
	19, // 16: youtube.api.v3.LiveChatMessageSnippet.poll_details:type_name -> youtube.api.v3.LiveChatPollDetails
	22, // 17: youtube.api.v3.LiveChatUserBannedMessageDetails.banned_user_details:type_name -> youtube.api.v3.ChannelProfileDetails
	1,  // 18: youtube.api.v3.LiveChatUserBannedMessageDetails.ban_type:type_name -> youtube.api.v3.LiveChatUserBannedMessageDetails.BanTypeWrapper.BanType
	21, // 19: youtube.api.v3.LiveChatSuperStickerDetails.super_sticker_metadata:type_name -> youtube.api.v3.SuperStickerMetadata
	26, // 20: youtube.api.v3.LiveChatPollDetails.metadata:type_name -> youtube.api.v3.LiveChatPollDetails.PollMetadata
	2,  // 21: youtube.api.v3.LiveChatPollDetails.status:type_name -> youtube.api.v3.LiveChatPollDetails.PollStatusWrapper.PollStatus
	22, // 22: youtube.api.v3.SuperChatEventSnippet.supporter_details:type_name -> youtube.api.v3.ChannelProfileDetails
	21, // 23: youtube.api.v3.SuperChatEventSnippet.super_sticker_metadata:type_name -> youtube.api.v3.SuperStickerMetadata
	28, // 24: youtube.api.v3.LiveChatPollDetails.PollMetadata.options:type_name -> youtube.api.v3.LiveChatPollDetails.PollMetadata.PollOption
	3,  // 25: youtube.api.v3.V3DataLiveChatMessageService.StreamList:input_type -> youtube.api.v3.LiveChatMessageListRequest
	4,  // 26: youtube.api.v3.V3DataLiveChatMessageService.StreamList:output_type -> youtube.api.v3.LiveChatMessageListResponse
	26, // [26:27] is the sub-list for method output_type
	25, // [25:26] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_apps_reader_internal_infra_youtube_stream_list_proto_init() }
func file_apps_reader_internal_infra_youtube_stream_list_proto_init() {
	if File_apps_reader_internal_infra_youtube_stream_list_proto != nil {
		return
	}
	file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes[4].OneofWrappers = []any{
		(*LiveChatMessageSnippet_TextMessageDetails)(nil),
		(*LiveChatMessageSnippet_MessageDeletedDetails)(nil),
		(*LiveChatMessageSnippet_MessageRetractedDetails)(nil),
		(*LiveChatMessageSnippet_UserBannedDetails)(nil),
		(*LiveChatMessageSnippet_SuperChatDetails)(nil),
		(*LiveChatMessageSnippet_SuperStickerDetails)(nil),
		(*LiveChatMessageSnippet_NewSponsorDetails)(nil),
		(*LiveChatMessageSnippet_MemberMilestoneChatDetails)(nil),
		(*LiveChatMessageSnippet_MembershipGiftingDetails)(nil),
		(*LiveChatMessageSnippet_GiftMembershipReceivedDetails)(nil),
		(*LiveChatMessageSnippet_PollDetails)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_apps_reader_internal_infra_youtube_stream_list_proto_rawDesc), len(file_apps_reader_internal_infra_youtube_stream_list_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_apps_reader_internal_infra_youtube_stream_list_proto_goTypes,
		DependencyIndexes: file_apps_reader_internal_infra_youtube_stream_list_proto_depIdxs,
		EnumInfos:         file_apps_reader_internal_infra_youtube_stream_list_proto_enumTypes,
		MessageInfos:      file_apps_reader_internal_infra_youtube_stream_list_proto_msgTypes,
	}.Build()
	File_apps_reader_internal_infra_youtube_stream_list_proto = out.File
	file_apps_reader_internal_infra_youtube_stream_list_proto_goTypes = nil
	file_apps_reader_internal_infra_youtube_stream_list_proto_depIdxs = nil
}
