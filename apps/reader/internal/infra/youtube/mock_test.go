// Code generated by MockGen. DO NOT EDIT.
// Source: grpc.go
//
// Generated by this command:
//
//	mockgen -destination=mock_test.go -package=youtube_test -source=grpc.go
//

// Package youtube_test is a generated GoMock package.
package youtube_test

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockTicker is a mock of Ticker interface.
type MockTicker struct {
	ctrl     *gomock.Controller
	recorder *MockTickerMockRecorder
	isgomock struct{}
}

// MockTickerMockRecorder is the mock recorder for MockTicker.
type MockTickerMockRecorder struct {
	mock *MockTicker
}

// NewMockTicker creates a new mock instance.
func NewMockTicker(ctrl *gomock.Controller) *MockTicker {
	mock := &MockTicker{ctrl: ctrl}
	mock.recorder = &MockTickerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicker) EXPECT() *MockTickerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockTicker) Start(d time.Duration) (<-chan time.Time, func()) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", d)
	ret0, _ := ret[0].(<-chan time.Time)
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockTickerMockRecorder) Start(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTicker)(nil).Start), d)
}
