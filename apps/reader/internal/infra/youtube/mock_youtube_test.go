// Code generated by MockGen. DO NOT EDIT.
// Source: stream_list_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -destination=mock_youtube_test.go -package=youtube_test -source=stream_list_grpc.pb.go -exclude_interfaces V3DataLiveChatMessageServiceServer,UnsafeV3DataLiveChatMessageServiceServer
//

// Package youtube_test is a generated GoMock package.
package youtube_test

import (
	context "context"
	reflect "reflect"

	youtube "github.com/natsoman/youtube-chat-reader/apps/reader/internal/infra/youtube"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockV3DataLiveChatMessageServiceClient is a mock of V3DataLiveChatMessageServiceClient interface.
type MockV3DataLiveChatMessageServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockV3DataLiveChatMessageServiceClientMockRecorder
	isgomock struct{}
}

// MockV3DataLiveChatMessageServiceClientMockRecorder is the mock recorder for MockV3DataLiveChatMessageServiceClient.
type MockV3DataLiveChatMessageServiceClientMockRecorder struct {
	mock *MockV3DataLiveChatMessageServiceClient
}

// NewMockV3DataLiveChatMessageServiceClient creates a new mock instance.
func NewMockV3DataLiveChatMessageServiceClient(ctrl *gomock.Controller) *MockV3DataLiveChatMessageServiceClient {
	mock := &MockV3DataLiveChatMessageServiceClient{ctrl: ctrl}
	mock.recorder = &MockV3DataLiveChatMessageServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockV3DataLiveChatMessageServiceClient) EXPECT() *MockV3DataLiveChatMessageServiceClientMockRecorder {
	return m.recorder
}

// StreamList mocks base method.
func (m *MockV3DataLiveChatMessageServiceClient) StreamList(ctx context.Context, in *youtube.LiveChatMessageListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[youtube.LiveChatMessageListResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamList", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[youtube.LiveChatMessageListResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamList indicates an expected call of StreamList.
func (mr *MockV3DataLiveChatMessageServiceClientMockRecorder) StreamList(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamList", reflect.TypeOf((*MockV3DataLiveChatMessageServiceClient)(nil).StreamList), varargs...)
}
