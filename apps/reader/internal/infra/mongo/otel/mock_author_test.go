// Code generated by MockGen. DO NOT EDIT.
// Source: author.go
//
// Generated by this command:
//
//	mockgen -destination=mock_author_test.go -package=otel_test -source=author.go
//

// Package otel_test is a generated GoMock package.
package otel_test

import (
	context "context"
	reflect "reflect"

	domain "github.com/natsoman/youtube-chat-reader/apps/reader/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorRepository is a mock of AuthorRepository interface.
type MockAuthorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorRepositoryMockRecorder
	isgomock struct{}
}

// MockAuthorRepositoryMockRecorder is the mock recorder for MockAuthorRepository.
type MockAuthorRepositoryMockRecorder struct {
	mock *MockAuthorRepository
}

// NewMockAuthorRepository creates a new mock instance.
func NewMockAuthorRepository(ctrl *gomock.Controller) *MockAuthorRepository {
	mock := &MockAuthorRepository{ctrl: ctrl}
	mock.recorder = &MockAuthorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorRepository) EXPECT() *MockAuthorRepositoryMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockAuthorRepository) Upsert(ctx context.Context, aa []domain.Author) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, aa)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockAuthorRepositoryMockRecorder) Upsert(ctx, aa any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockAuthorRepository)(nil).Upsert), ctx, aa)
}
