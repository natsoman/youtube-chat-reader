// Code generated by MockGen. DO NOT EDIT.
// Source: ban.go
//
// Generated by this command:
//
//	mockgen -destination=mock_ban_test.go -package=otel_test -source=ban.go
//

// Package otel_test is a generated GoMock package.
package otel_test

import (
	context "context"
	reflect "reflect"

	domain "github.com/natsoman/youtube-chat-reader/apps/reader/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockBanRepository is a mock of BanRepository interface.
type MockBanRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBanRepositoryMockRecorder
	isgomock struct{}
}

// MockBanRepositoryMockRecorder is the mock recorder for MockBanRepository.
type MockBanRepositoryMockRecorder struct {
	mock *MockBanRepository
}

// NewMockBanRepository creates a new mock instance.
func NewMockBanRepository(ctrl *gomock.Controller) *MockBanRepository {
	mock := &MockBanRepository{ctrl: ctrl}
	mock.recorder = &MockBanRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBanRepository) EXPECT() *MockBanRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockBanRepository) Insert(ctx context.Context, bb []domain.Ban) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, bb)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockBanRepositoryMockRecorder) Insert(ctx, bb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockBanRepository)(nil).Insert), ctx, bb)
}
