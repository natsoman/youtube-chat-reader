// Code generated by MockGen. DO NOT EDIT.
// Source: text.go
//
// Generated by this command:
//
//	mockgen -destination=mock_text_test.go -package=otel_test -source=text.go
//

// Package otel_test is a generated GoMock package.
package otel_test

import (
	context "context"
	reflect "reflect"

	domain "github.com/natsoman/youtube-chat-reader/apps/reader/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockTextMessageRepository is a mock of TextMessageRepository interface.
type MockTextMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTextMessageRepositoryMockRecorder
	isgomock struct{}
}

// MockTextMessageRepositoryMockRecorder is the mock recorder for MockTextMessageRepository.
type MockTextMessageRepositoryMockRecorder struct {
	mock *MockTextMessageRepository
}

// NewMockTextMessageRepository creates a new mock instance.
func NewMockTextMessageRepository(ctrl *gomock.Controller) *MockTextMessageRepository {
	mock := &MockTextMessageRepository{ctrl: ctrl}
	mock.recorder = &MockTextMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTextMessageRepository) EXPECT() *MockTextMessageRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockTextMessageRepository) Insert(ctx context.Context, tms []domain.TextMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, tms)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockTextMessageRepositoryMockRecorder) Insert(ctx, tms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTextMessageRepository)(nil).Insert), ctx, tms)
}
