// Code generated by MockGen. DO NOT EDIT.
// Source: progress.go
//
// Generated by this command:
//
//	mockgen -destination=mock_progress_test.go -package=otel_test -source=progress.go
//

// Package otel_test is a generated GoMock package.
package otel_test

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/natsoman/youtube-chat-reader/apps/reader/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockLiveStreamProgressRepository is a mock of LiveStreamProgressRepository interface.
type MockLiveStreamProgressRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLiveStreamProgressRepositoryMockRecorder
	isgomock struct{}
}

// MockLiveStreamProgressRepositoryMockRecorder is the mock recorder for MockLiveStreamProgressRepository.
type MockLiveStreamProgressRepositoryMockRecorder struct {
	mock *MockLiveStreamProgressRepository
}

// NewMockLiveStreamProgressRepository creates a new mock instance.
func NewMockLiveStreamProgressRepository(ctrl *gomock.Controller) *MockLiveStreamProgressRepository {
	mock := &MockLiveStreamProgressRepository{ctrl: ctrl}
	mock.recorder = &MockLiveStreamProgressRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLiveStreamProgressRepository) EXPECT() *MockLiveStreamProgressRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockLiveStreamProgressRepository) Insert(ctx context.Context, lsp *domain.LiveStreamProgress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, lsp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockLiveStreamProgressRepositoryMockRecorder) Insert(ctx, lsp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockLiveStreamProgressRepository)(nil).Insert), ctx, lsp)
}

// Started mocks base method.
func (m *MockLiveStreamProgressRepository) Started(ctx context.Context, startsWithin time.Duration) ([]domain.LiveStreamProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Started", ctx, startsWithin)
	ret0, _ := ret[0].([]domain.LiveStreamProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Started indicates an expected call of Started.
func (mr *MockLiveStreamProgressRepositoryMockRecorder) Started(ctx, startsWithin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Started", reflect.TypeOf((*MockLiveStreamProgressRepository)(nil).Started), ctx, startsWithin)
}

// Upsert mocks base method.
func (m *MockLiveStreamProgressRepository) Upsert(ctx context.Context, lsp *domain.LiveStreamProgress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, lsp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockLiveStreamProgressRepositoryMockRecorder) Upsert(ctx, lsp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockLiveStreamProgressRepository)(nil).Upsert), ctx, lsp)
}
