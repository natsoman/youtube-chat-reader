// Code generated by MockGen. DO NOT EDIT.
// Source: donate.go
//
// Generated by this command:
//
//	mockgen -destination=mock_donate_test.go -package=otel_test -source=donate.go
//

// Package otel_test is a generated GoMock package.
package otel_test

import (
	context "context"
	reflect "reflect"

	domain "github.com/natsoman/youtube-chat-reader/apps/reader/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockDonateRepository is a mock of DonateRepository interface.
type MockDonateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDonateRepositoryMockRecorder
	isgomock struct{}
}

// MockDonateRepositoryMockRecorder is the mock recorder for MockDonateRepository.
type MockDonateRepositoryMockRecorder struct {
	mock *MockDonateRepository
}

// NewMockDonateRepository creates a new mock instance.
func NewMockDonateRepository(ctrl *gomock.Controller) *MockDonateRepository {
	mock := &MockDonateRepository{ctrl: ctrl}
	mock.recorder = &MockDonateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDonateRepository) EXPECT() *MockDonateRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockDonateRepository) Insert(ctx context.Context, dd []domain.Donate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, dd)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDonateRepositoryMockRecorder) Insert(ctx, dd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDonateRepository)(nil).Insert), ctx, dd)
}
